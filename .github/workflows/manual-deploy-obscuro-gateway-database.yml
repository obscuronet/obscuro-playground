# Deploys Obscuro Gateway's Database on Azure for Testnet
# Starts the Obscuro Gateway's database on Azure VM

name: '[M] Deploy Obscuro Gateway Database'
run-name: '[M] Deploy Obscuro Gateway Database ( ${{ github.event.inputs.testnet_type }} )'
on:
  workflow_dispatch:
    inputs:
      testnet_type:
        description: 'Testnet Type'
        required: true
        default: 'dev-testnet'
        type: choice
        options:
          - 'dev-testnet'
          - 'uat-testnet'
          - 'sepolia-testnet'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.testnet_type }}
    steps:
      - name: 'Print GitHub variables'
        # This is a useful record of what the environment variables were at the time the job ran, for debugging and reference
        run: |
          echo "GitHub Variables = ${{ toJSON(vars) }}"

      - uses: actions/checkout@v3

      - name: 'Extract branch name'
        shell: bash
        run: |
          echo "Branch Name: ${GITHUB_REF_NAME}"
          echo "BRANCH_NAME=${GITHUB_REF_NAME}" >> $GITHUB_ENV

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # This will fail some deletions due to resource dependencies ( ie. you must first delete the vm before deleting the disk)
      - name: 'Delete deployed VMs'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            $(az resource list --tag ${{ vars.AZURE_DEPLOY_GROUP_GATEWAY_DB }}=true --query '[]."id"' -o tsv | xargs -n1 az resource delete --verbose -g Testnet --ids) || true

      # This will clean up any lingering dependencies - might fail if there are no resources to cleanup
      - name: 'Delete VMs dependencies'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            $(az resource list --tag ${{ vars.AZURE_DEPLOY_GROUP_GATEWAY_DB }}=true --query '[]."id"' -o tsv | xargs -n1 az resource delete --verbose -g Testnet --ids) || true


      - name: 'Create VM for Gateway database node on Azure'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az vm create -g Testnet -n "${{ github.event.inputs.testnet_type }}-OG-MariaDB-${{ GITHUB.RUN_NUMBER }}" \
            --admin-username obscurouser --admin-password "${{ secrets.OBSCURO_NODE_VM_PWD }}" \
            --public-ip-address-dns-name "obscurogateway-mariadb-${{ github.event.inputs.testnet_type }}" \
            --tags deploygroup=ObscuroGateway-mariaDB-${{ github.event.inputs.testnet_type }}-${{ GITHUB.RUN_NUMBER }}  ${{ vars.AZURE_DEPLOY_GROUP_GATEWAY_DB }}=true \
            --size 	Standard_D4_v5 --image Canonical:0001-com-ubuntu-server-focal:20_04-lts-gen2:latest \
            --public-ip-sku Basic --authentication-type password

      - name: 'Open Obscuro Gateway db ports on Azure'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az vm open-port -g Testnet -n "${{ github.event.inputs.testnet_type }}-OG-MariaDB-${{ GITHUB.RUN_NUMBER }}" --port 3306

        # To overcome issues with critical VM resources being unavailable, we need to wait for the VM to be ready
      - name: 'Allow time for VM initialization'
        shell: bash
        run: sleep 30

      - name: 'Start Obscuro gateway Database on Azure'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az vm run-command invoke -g Testnet -n "${{ github.event.inputs.testnet_type }}-OG-MariaDB-${{ GITHUB.RUN_NUMBER }}"  \
            --command-id RunShellScript \
            --scripts 'mkdir -p /home/obscuro \
            && sudo apt-get update \
            && sudo apt-get install -y gcc \
            && sudo snap refresh && sudo snap install --channel=1.18 go --classic \
            && curl -fsSL https://get.docker.com -o get-docker.sh && sh ./get-docker.sh \
            && git clone --depth 1 -b ${{ env.BRANCH_NAME }} https://github.com/obscuronet/go-obscuro.git /home/obscuro/go-obscuro \
            && docker network create --driver bridge node_network || true \
            && docker run -d --name datadog-agent \
               --network node_network \
               -e DD_API_KEY=${{ secrets.DD_API_KEY }} \
               -e DD_LOGS_ENABLED=true \
               -e DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true \
               -e DD_LOGS_CONFIG_AUTO_MULTI_LINE_DETECTION=true \
               -e DD_CONTAINER_EXCLUDE_LOGS="name:datadog-agent" \
               -e DD_SITE="datadoghq.eu"  \
               -v /var/run/docker.sock:/var/run/docker.sock:ro \
               -v /proc/:/host/proc/:ro \
               -v /opt/datadog-agent/run:/opt/datadog-agent/run:rw \
               -v /sys/fs/cgroup/:/host/sys/fs/cgroup:ro \
               datadog/agent:latest \
            && cd /home/obscuro/go-obscuro/ \
            && docker run -d --name ${{ github.event.inputs.testnet_type }}-OG-MariaDB-${{ GITHUB.RUN_NUMBER }} \
                -p 3306:3306 \
                -e MARIADB_ROOT_PASSWORD=${{ secrets.OBSCURO_GATEWAY_MARIADB_ROOT_PWD }} \
                -e MARIADB_USER=obscurouser \
                -e MARIADB_PASSWORD=${{ secrets.OBSCURO_GATEWAY_MARIADB_USER_PWD }} \
                -v /home/obscuro/go-obscuro/tools/walletextension/storage/database/001_init.sql:/docker-entrypoint-initdb.d/schema.sql \
                mariadb:11.1.2-jammy \
                --max_password_errors=2'

