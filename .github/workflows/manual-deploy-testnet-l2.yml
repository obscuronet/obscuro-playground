# Deploys an Obscuro network on Azure for Testnet and Dev Testnet
#
# The Obscuro network is composed of 2 obscuro nodes running on individual vms with SGX. At the moment the workflow
# can either be triggered manually as a workflow dispatch, or as a scheduled task. When manually triggered the
# testnet type (dev-testnet or testnet) can be supplied as an input argument. When triggered as a scheduled task,
# we always default to a dev-testnet deployment. A scheduled deployment of dev-testnet will additionally kick off
# the E2E tests via a repository dispatch.
#

name: '[M] Deploy Testnet L2'
on:
  schedule:
    - cron: '05 4 * * *'
  workflow_dispatch:
    inputs:
      testnet_type:
        description: 'Testnet Type'
        required: true
        default: 'dev-testnet'
        type: choice
        options:
          - 'dev-testnet'
          - 'testnet'

jobs:
  build:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      MGMT_CONTRACT_ADDR: ${{ steps.deployContracts.outputs.MGMT_CONTRACT_ADDR }}
      MSG_BUS_CONTRACT_ADDR: ${{ steps.deployContracts.outputs.MSG_BUS_CONTRACT_ADDR }}
      HOC_ERC20_ADDR: ${{ steps.deployContracts.outputs.HOC_ERC20_ADDR }}
      POC_ERC20_ADDR: ${{ steps.deployContracts.outputs.POC_ERC20_ADDR }}
      L2_ENCLAVE_DOCKER_BUILD_TAG: ${{ steps.outputVars.outputs.L2_ENCLAVE_DOCKER_BUILD_TAG }}
      L2_HOST_DOCKER_BUILD_TAG: ${{ steps.outputVars.outputs.L2_HOST_DOCKER_BUILD_TAG }}
      L2_CONTRACTDEPLOYER_DOCKER_BUILD_TAG: ${{ steps.outputVars.outputs.L2_CONTRACTDEPLOYER_DOCKER_BUILD_TAG }}
      L2_HARDHATDEPLOYER_DOCKER_BUILD_TAG: ${{ steps.outputVars.outputs.L2_HARDHATDEPLOYER_DOCKER_BUILD_TAG }}
      RESOURCE_TAG_NAME: ${{ steps.outputVars.outputs.RESOURCE_TAG_NAME }}
      RESOURCE_STARTING_NAME: ${{ steps.outputVars.outputs.RESOURCE_STARTING_NAME }}
      RESOURCE_TESTNET_NAME: ${{ steps.outputVars.outputs.RESOURCE_TESTNET_NAME }}
      L1_HOST: ${{ steps.outputVars.outputs.L1_HOST }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v3
        with:
          go-version: 1.17

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Sets env vars for testnet'
        if: ${{ github.event.inputs.testnet_type  == 'testnet' }}
        run: |
          echo "L2_ENCLAVE_DOCKER_BUILD_TAG=testnetobscuronet.azurecr.io/obscuronet/enclave:latest" >> $GITHUB_ENV
          echo "L2_HOST_DOCKER_BUILD_TAG=testnetobscuronet.azurecr.io/obscuronet/host:latest" >> $GITHUB_ENV
          echo "L2_CONTRACTDEPLOYER_DOCKER_BUILD_TAG=testnetobscuronet.azurecr.io/obscuronet/contractdeployer:latest" >> $GITHUB_ENV
          echo "L2_HARDHATDEPLOYER_DOCKER_BUILD_TAG=testnetobscuronet.azurecr.io/obscuronet/hardhatdeployer:latest" >> $GITHUB_ENV
          echo "RESOURCE_TAG_NAME=testnetlatest" >> $GITHUB_ENV
          echo "RESOURCE_STARTING_NAME=T" >> $GITHUB_ENV
          echo "RESOURCE_TESTNET_NAME=testnet" >> $GITHUB_ENV
          echo "L1_HOST=testnet-eth2network.uksouth.azurecontainer.io" >> $GITHUB_ENV

      - name: 'Sets env vars for dev-testnet'
        if: ${{ (github.event.inputs.testnet_type == 'dev-testnet') || (github.event_name == 'schedule') }}
        run: |
          echo "L2_ENCLAVE_DOCKER_BUILD_TAG=testnetobscuronet.azurecr.io/obscuronet/dev_enclave:latest" >> $GITHUB_ENV
          echo "L2_HOST_DOCKER_BUILD_TAG=testnetobscuronet.azurecr.io/obscuronet/dev_host:latest" >> $GITHUB_ENV
          echo "L2_CONTRACTDEPLOYER_DOCKER_BUILD_TAG=testnetobscuronet.azurecr.io/obscuronet/dev_contractdeployer:latest" >> $GITHUB_ENV
          echo "L2_HARDHATDEPLOYER_DOCKER_BUILD_TAG=testnetobscuronet.azurecr.io/obscuronet/dev_hardhatdeployer:latest" >> $GITHUB_ENV
          echo "RESOURCE_TAG_NAME=devtestnetlatest" >> $GITHUB_ENV
          echo "RESOURCE_STARTING_NAME=D" >> $GITHUB_ENV
          echo "RESOURCE_TESTNET_NAME=devtestnet" >> $GITHUB_ENV
          echo "L1_HOST=dev-testnet-eth2network.uksouth.azurecontainer.io" >> $GITHUB_ENV

      - name: 'Output env vars'
        id: outputVars
        run: |
          echo "L2_ENCLAVE_DOCKER_BUILD_TAG=${{env.L2_ENCLAVE_DOCKER_BUILD_TAG}}" >> $GITHUB_OUTPUT
          echo "L2_HOST_DOCKER_BUILD_TAG=${{env.L2_HOST_DOCKER_BUILD_TAG}}" >> $GITHUB_OUTPUT
          echo "L2_CONTRACTDEPLOYER_DOCKER_BUILD_TAG=${{env.L2_CONTRACTDEPLOYER_DOCKER_BUILD_TAG}}" >> $GITHUB_OUTPUT
          echo "L2_HARDHATDEPLOYER_DOCKER_BUILD_TAG=${{env.L2_HARDHATDEPLOYER_DOCKER_BUILD_TAG}}" >> $GITHUB_OUTPUT
          echo "RESOURCE_TAG_NAME=${{env.RESOURCE_TAG_NAME}}" >> $GITHUB_OUTPUT
          echo "RESOURCE_STARTING_NAME=${{env.RESOURCE_STARTING_NAME}}" >> $GITHUB_OUTPUT
          echo "RESOURCE_TESTNET_NAME=${{env.RESOURCE_TESTNET_NAME}}" >> $GITHUB_OUTPUT
          echo "L1_HOST=${{env.L1_HOST}}" >> $GITHUB_OUTPUT
          

      - name: 'Login to Azure docker registry'
        uses: azure/docker-login@v1
        with:
          login-server: testnetobscuronet.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: 'Build and push obscuro node images'
        run: |
          DOCKER_BUILDKIT=1 docker build -t ${{env.L2_ENCLAVE_DOCKER_BUILD_TAG}} -f dockerfiles/enclave.Dockerfile  .
          docker push ${{env.L2_ENCLAVE_DOCKER_BUILD_TAG}}
          DOCKER_BUILDKIT=1 docker build -t ${{env.L2_HOST_DOCKER_BUILD_TAG}} -f dockerfiles/host.Dockerfile .
          docker push ${{env.L2_HOST_DOCKER_BUILD_TAG}}
          DOCKER_BUILDKIT=1 docker build -t ${{env.L2_CONTRACTDEPLOYER_DOCKER_BUILD_TAG}} -f testnet/contractdeployer.Dockerfile .
          docker push ${{env.L2_CONTRACTDEPLOYER_DOCKER_BUILD_TAG}}
          DOCKER_BUILDKIT=1 docker build -t ${{env.L2_HARDHATDEPLOYER_DOCKER_BUILD_TAG}} -f testnet/hardhatdeployer.Dockerfile .
          docker push ${{env.L2_HARDHATDEPLOYER_DOCKER_BUILD_TAG}}

      - name: 'Deploy Contracts'
        id: deployContracts
        shell: bash
        run: |
          go run ./testnet/launcher/l1contractdeployer/cmd \
          -l1_host=${{ env.L1_HOST }} \
          -private_key=${{ secrets.GETHNETWORK_PREFUNDED_PKSTR_WORKER }} \
          -docker_image=${{env.L2_HARDHATDEPLOYER_DOCKER_BUILD_TAG}} \
          -contracts_env_file=./testnet/.env
          source ./testnet/.env
          echo "Contracts deployed to $MGMTCONTRACTADDR"
          echo "MGMT_CONTRACT_ADDR=$MGMTCONTRACTADDR" >> $GITHUB_ENV
          echo "MGMT_CONTRACT_ADDR=$MGMTCONTRACTADDR" >> $GITHUB_OUTPUT
          echo "MSG_BUS_CONTRACT_ADDR=$MSGBUSCONTRACTADDR" >> $GITHUB_ENV
          echo "MSG_BUS_CONTRACT_ADDR=$MSGBUSCONTRACTADDR" >> $GITHUB_OUTPUT

      # This will fail some deletions due to resource dependencies ( ie. you must first delete the vm before deleting the disk)
      - name: 'Delete deployed VMs'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            $(az resource list --tag ${{env.RESOURCE_TAG_NAME}}=true --query '[]."id"' -o tsv | xargs -n1 az resource delete --verbose -g Testnet --ids) || true

      # This will clean up any lingering dependencies - might fail if there are no resources to cleanup
      - name: 'Delete VMs dependencies'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            $(az resource list --tag ${{env.RESOURCE_TAG_NAME}}=true --query '[]."id"' -o tsv | xargs -n1 az resource delete --verbose -g Testnet --ids) || true

  deploy:
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        host_id: [ 0,1 ]
        include:
          # Hardcoded host addresses
          - host_addr: 0x0000000000000000000000000000000000000000
            host_id: 0
          - host_addr: 0x0000000000000000000000000000000000000001
            host_id: 1
          # Hardcoded host prefunded keys
          - node_pk_str: GETHNETWORK_PREFUNDED_PKSTR_0
            host_id: 0
          - node_pk_str: GETHNETWORK_PREFUNDED_PKSTR_1
            host_id: 1
          - node_pk_addr: GETHNETWORK_PREFUNDED_ADDR_0
            host_id: 0
          - node_pk_addr: GETHNETWORK_PREFUNDED_ADDR_1
            host_id: 1
          # Ensure there is a single genesis node
          - is_genesis: true
            host_id: 0
          - is_genesis: false
            host_id: 1
          # Ensure there is a single sequencer
          - node_type: sequencer
            host_id: 0
          - node_type: validator
            host_id: 1

    steps:
      - name: 'Extract branch name'
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF_NAME})"
        id: extract_branch

        # The Azure API will sometimes supersede PUT requests that come in close together. This sleep will stagger the VM requests.
        # It expects host_id to be an int and then multiplies it by 30s (i.e. host 0: sleep 0, host 1: sleep 30,...)
      - name: 'Stagger VM creation'
        shell: bash
        run: sleep `expr ${{matrix.host_id}} \* 30`

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Create VM for Obscuro node-${{ matrix.host_id }} on Azure'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az vm create -g Testnet -n "${{needs.build.outputs.RESOURCE_STARTING_NAME}}-${{ matrix.host_id }}-${{ GITHUB.RUN_NUMBER }}" \
            --admin-username obscurouser --admin-password "${{ secrets.OBSCURO_NODE_VM_PWD }}" \
            --public-ip-address-dns-name "obscuronode-${{ matrix.host_id }}-${{needs.build.outputs.RESOURCE_TESTNET_NAME}}-${{ GITHUB.RUN_NUMBER }}" \
            --tags deploygroup=ObscuroNode-${{needs.build.outputs.RESOURCE_TESTNET_NAME}}-${{ GITHUB.RUN_NUMBER }}  ${{needs.build.outputs.RESOURCE_TAG_NAME}}=true \
            --vnet-name ObscuroHost-${{needs.build.outputs.RESOURCE_TESTNET_NAME}}-01VNET --subnet ObscuroHost-${{needs.build.outputs.RESOURCE_TESTNET_NAME}}-01Subnet \
            --size Standard_DC4s_v2 --image Canonical:0001-com-ubuntu-server-focal:20_04-lts-gen2:20.04.202206220 \
            --public-ip-sku Basic --authentication-type password

      - name: 'Open Obscuro node-${{ matrix.host_id }} ports on Azure'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az vm open-port -g Testnet -n "${{needs.build.outputs.RESOURCE_STARTING_NAME}}-${{ matrix.host_id }}-${{ GITHUB.RUN_NUMBER }}"  --port 13000,13001,6060,6061,10000

      - name: 'Wait for Obscuro sequencer to start'
        shell: bash
        run: if [ 0! = ${{ matrix.host_id }} ]; then sleep 60; fi

      - name: 'Start Obscuro node-${{ matrix.host_id }} on Azure'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az vm run-command invoke -g Testnet -n "${{needs.build.outputs.RESOURCE_STARTING_NAME}}-${{ matrix.host_id }}-${{ GITHUB.RUN_NUMBER }}"  \
            --command-id RunShellScript \
            --scripts 'mkdir -p /home/obscuro \
            && git clone --depth 1 -b ${{ steps.extract_branch.outputs.branch }} https://github.com/obscuronet/go-obscuro.git /home/obscuro/go-obscuro \
            && sudo apt-get update \
            && sudo snap refresh && sudo snap install --channel=1.17 go --classic \
            && curl -fsSL https://get.docker.com -o get-docker.sh && sh ./get-docker.sh \
            && docker network create --driver bridge node_network || true \
            && docker run -d --name datadog-agent \
               --network node_network \
               -e DD_API_KEY=${{ secrets.DD_API_KEY }} \
               -e DD_LOGS_ENABLED=true \
               -e DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true \
               -e DD_LOGS_CONFIG_AUTO_MULTI_LINE_DETECTION=true \
               -e DD_CONTAINER_EXCLUDE_LOGS="name:datadog-agent" \
               -e DD_SITE="datadoghq.eu"  \
               -v /var/run/docker.sock:/var/run/docker.sock:ro \
               -v /proc/:/host/proc/:ro \
               -v /opt/datadog-agent/run:/opt/datadog-agent/run:rw \
               -v /sys/fs/cgroup/:/host/sys/fs/cgroup:ro \
               datadog/agent:latest \
            && cd /home/obscuro/go-obscuro/ \
            && sudo go run /home/obscuro/go-obscuro/go/node/cmd  \
               -is_genesis=${{ matrix.is_genesis }} \
               -node_type=${{ matrix.node_type }} \
               -is_sgx_enabled=true \
               -host_id=${{ secrets[matrix.node_pk_addr] }} \
               -l1_host=${{needs.build.outputs.L1_HOST}} \
               -management_contract_addr=${{needs.build.outputs.MGMT_CONTRACT_ADDR}} \
               -message_bus_contract_addr=${{needs.build.outputs.MSG_BUS_CONTRACT_ADDR}} \
               -private_key=${{ secrets[matrix.node_pk_str] }} \
               -sequencer_id=${{ secrets.GETHNETWORK_PREFUNDED_ADDR_0 }} \
               -host_public_p2p_addr=obscuronode-${{ matrix.host_id }}-${{needs.build.outputs.RESOURCE_TESTNET_NAME}}-${{ GITHUB.RUN_NUMBER }}.uksouth.cloudapp.azure.com:10000 \
               -host_p2p_port=10000 \
               -enclave_docker_image=${{needs.build.outputs.L2_ENCLAVE_DOCKER_BUILD_TAG}} \
               -host_docker_image=${{needs.build.outputs.L2_HOST_DOCKER_BUILD_TAG}}'


  update-loadbalancer:
    needs:
      - build
      - deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Remove existing backend nodes from the load balancer'
        run: ./.github/workflows/runner-scripts/testnet-clear-loadbalancer.sh ${{needs.build.outputs.RESOURCE_TESTNET_NAME}}

      - name: 'Add load balancer address pool to the IP configuration'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az network nic ip-config address-pool add \
              --address-pool Backend-Pool-Obscuro-${{needs.build.outputs.RESOURCE_TESTNET_NAME}} \
              --ip-config-name ipconfig${{needs.build.outputs.RESOURCE_STARTING_NAME}}-1-${{ GITHUB.RUN_NUMBER }} \
              --nic-name ${{needs.build.outputs.RESOURCE_STARTING_NAME}}-1-${{ GITHUB.RUN_NUMBER }}VMNic \
              --resource-group Testnet \
              --lb-name ${{needs.build.outputs.RESOURCE_TESTNET_NAME}}-loadbalancer

  check-obscuro-is-healthy:
    needs:
      - build
      - deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: "Wait until obscuro node is healthy"
        shell: bash
        run: |
          ./.github/workflows/runner-scripts/wait-node-healthy.sh --host=obscuronode-0-${{needs.build.outputs.RESOURCE_TESTNET_NAME}}-${{ GITHUB.RUN_NUMBER }}.uksouth.cloudapp.azure.com

  deploy-l2-contracts:
    needs:
      - build
      - check-obscuro-is-healthy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: 'Deploy L2 contracts'
        id: deployL2Contracts
        shell: bash
        run: |
          go run ./testnet/launcher/l2contractdeployer/cmd \
          -l2_host=obscuronode-0-${{needs.build.outputs.RESOURCE_TESTNET_NAME}}-${{ GITHUB.RUN_NUMBER }}.uksouth.cloudapp.azure.com \
          -l1_host=${{ needs.build.outputs.L1_HOST }} \
          -private_key=${{ secrets.GETHNETWORK_PREFUNDED_PKSTR_WORKER }} \
          -message_bus_contract_addr=${{ needs.build.outputs.MSG_BUS_CONTRACT_ADDR }} \
          -docker_image=${{needs.build.outputs.L2_HARDHATDEPLOYER_DOCKER_BUILD_TAG}}

  deploy-faucet:
    runs-on: ubuntu-latest
    needs:
      - update-loadbalancer
      - deploy-l2-contracts
    steps:
      - name: 'Trigger Faucet deployment on workflow dispatch'
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          curl -XPOST -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" -H "Accept:application/vnd.github" -H "Content-Type:application/json" https://api.github.com/repos/obscuronet/faucet/actions/workflows/manual-deploy-${{ github.event.inputs.testnet_type }}-faucet.yml/dispatches --data '{"ref": "main" }'

      - name: 'Trigger Faucet deployment on schedule'
        if: ${{ github.event_name == 'schedule' }}
        run: |
          curl -XPOST -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" -H "Accept:application/vnd.github" -H "Content-Type:application/json" https://api.github.com/repos/obscuronet/faucet/actions/workflows/manual-deploy-dev-testnet-faucet.yml/dispatches --data '{"ref": "main" }'

  run-e2e-tests:
    runs-on: ubuntu-latest
    needs:
      - deploy-faucet
    steps:
      - name: 'Run E2E tests on schedule trigger after successful deployment of dev-testnet'
        if: ${{ github.event_name == 'schedule' }}
        run: |
           curl -XPOST -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" -H "Accept:application/vnd.github" -H "Content-Type:application/json" https://api.github.com/repos/obscuronet/obscuro-test/dispatches --data '{ "event_type": "scheduled_deployment", "client_payload": { "ref": "main", "env": : "dev-testnet" }'
