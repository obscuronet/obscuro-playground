@startuml
' avoid problems with angled crows feet
skinparam linetype ortho

package "Batch Execution" as BE  #LightYellow{

note as N0
 This section is populated
 when a batch is processed.
end note

note as N1
 There can be multiple
 sibling batches, but
 they will always
 share a body.
end note

note as N2
 The same transaction can be part
 of multiple reorged sibling batches,
 and generate different receipts and events.
end note

note as N3
 Transactions can be bound
 to a batch body only.
end note

}

package "Block Submission" as BS  #LightBlue{
note as N4
 This section is populated
 when an L1 block is processed.
 The logic will store the rollups
 and the cross chain messages.
 It will also mark "is_canonical"
 when there are reorgs.
end note

}

package "Config" as C   #LightGreen{
note as N5
 This table contains general
 information like the shared secret,
 the attestation, etc.
end note

}


entity "Batch" as BE.batch {
  *batchHash : binary(32)
  --
  sequence : int
  height : int
  is_canonical : boolean
  source : P2P/ROLLUP
  header : string
  *l1Proof : binary(32) <<FK>>
  *bodyHash : binary(32) <<FK>>
}

entity "Batch Body" as BE.batch_body {
  *bodyHash : binary(32)
  --
  content : mediumblob
}

entity "Transaction" as BE.tx {
  *txHash : binary(32)
  --
  content : binary
  senderAddress : binary(20)
  nonce : int
  idx : int
  *bodyHash : binary(32) <<FK>>
}

entity "Executed Transaction" as BE.exec_tx {
  *execTxId : number <<generated>>
  --
  createdContractAddress : binary(32)
  receipt : mediumblob
  *txHash : binary(32) <<FK>>
  *batchHash : binary(32) <<FK>>
}

entity "Event" as BE.event {
  --
  topic0 : binary(32)
  topic1 : binary(32)
  topic2 : binary(32)
  topic3 : binary(32)
  topic4 : binary(32)
  datablob : mediumblob
  logIdx : int
  address : binary(32)
  lifecycleEvent : boolean
  relAddress1 : binary(20)
  relAddress2 : binary(20)
  relAddress3 : binary(20)
  relAddress4 : binary(20)
  *batchHash : binary(32) <<FK>>
  *execTxId : number <<FK>>
}

entity "Block" as BS.block {
  *blockHash : binary(32)
  --
  is_canonical : boolean
  height : int
  header : string
}

entity "L1 Message" as BS.l1_msg{
  __
  message : mediumblob
  *blockHash : binary(32) <<FK>>
}

entity "Rollup" as BS.rollup {
  *rollupHash : binary(32)
  --
  start_seq : int
  end_seq : int
  *blockHash : binary(32) <<FK>>
}

entity "Config" as C.cfg{
 *key : string
 --
 value : binary
}


batch_body ||..o{ tx : included in
batch_body ||..|{ batch
batch ||..o{ event
block ||..|{ batch : L1 proof
block ||..|{ rollup : Published in
exec_tx ||..|{ event
batch ||..|{ exec_tx
tx ||..|{ exec_tx
block ||..o{ l1_msg

batch_body .. N1
exec_tx .. N2
tx .. N3

@enduml