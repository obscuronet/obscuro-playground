// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package EthereumBridge

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// EthereumBridgeMetaData contains all meta data concerning the EthereumBridge contract.
var EthereumBridgeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"remoteAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"localAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"CreatedWrappedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"messengerAddress\",\"type\":\"address\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"hasTokenMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"messenger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteBridge\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"localToRemoteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crossChainAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"onCreateTokenCommand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"receiveAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remoteToLocalToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"sendERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"sendNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wrappedTokens\",\"outputs\":[{\"internalType\":\"contractWrappedERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x6080604052346200002657620000146200002b565b604051612d20620000938239612d2090f35b600080fd5b6200003562000084565b565b6200004a62000047620000479290565b90565b63ffffffff1690565b906200006762000047620000809262000037565b82549063ffffffff60a01b9060a01b9181191691161790565b9055565b62000035600060016200005356fe608060405260043610156200001b575b3662000f905762000fd5565b60003560e01c80628d48e314620000cd5780631888d71214620000c7578063458ffd6314620000c1578063485cc95514620000bb57806375cb267214620000b557806383bece4d14620000af5780639813c7b214620000a95780639e405b7114620000a3578063a381c8e2146200009d5763d5c6b504036200000f576200043f565b620003ef565b620003ce565b62000386565b62000368565b620002fe565b620002e0565b62000297565b620001e5565b620001a6565b6001600160a01b031690565b90565b6001600160a01b0381165b03620000f557565b600080fd5b905035906200010982620000e2565b565b90602082820312620000f557620000df91620000fa565b620000d3620000df620000df926001600160a01b031690565b620000df9062000122565b620000df906200013b565b906200015d9062000146565b600052602052604060002090565b620000df916008021c620000d3565b90620000df91546200016b565b620000df906200019c60049160009262000151565b6200017a565b9052565b34620000f557620001e1620001c7620001c13660046200010b565b62000187565b604051918291826001600160a01b03909116815260200190565b0390f35b620001fc620001f63660046200010b565b62000c00565b604051005b909182601f83011215620000f55781359167ffffffffffffffff8311620000f5576020019260018302840111620000f557565b606081830312620000f5576200024b8282620000fa565b92602082013567ffffffffffffffff8111620000f557836200026f91840162000201565b929093604082013567ffffffffffffffff8111620000f55762000293920162000201565b9091565b34620000f557620001fc620002ae36600462000234565b9392909262000a72565b9190604083820312620000f557620000df90620002d68185620000fa565b93602001620000fa565b34620000f557620001fc620002f7366004620002b8565b9062000742565b34620000f557620001fc620003153660046200010b565b62001129565b80620000ed565b9050359062000109826200031b565b9091606082840312620000f557620000df6200034e8484620000fa565b936200035e816020860162000322565b93604001620000fa565b34620000f557620001fc6200037f36600462000331565b9162000f83565b34620000f557620001e1620003a7620003a13660046200010b565b62000a9c565b60405191829182901515815260200190565b620000df906200019c60039160009262000151565b34620000f557620001e1620001c7620003e93660046200010b565b620003b9565b34620000f557620001fc6200040636600462000331565b9162000d81565b620000df906200019c60029160009262000151565b620001a29062000146565b60208101929162000109919062000422565b34620000f557620001e1620004606200045a3660046200010b565b6200040d565b604051918291826200042d565b620000df9060401c5b60ff1690565b620000df90546200046d565b620000df905b67ffffffffffffffff1690565b620000df905462000488565b6200048e620000df620000df9290565b620000df620000df620000df9290565b9067ffffffffffffffff905b9181191691161790565b6200048e620000df620000df9267ffffffffffffffff1690565b906200050b620000df6200051392620004dd565b8254620004c7565b9055565b9068ff00000000000000009060401b620004d3565b906200053f620000df6200051392151590565b825462000517565b620001a290620004a7565b60208101929162000109919062000547565b907ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081620005a66200059f6200059b836200047c565b1590565b916200049b565b93600092620005b584620004a7565b67ffffffffffffffff87161480620006f6575b600196620005e8620005da89620004a7565b9167ffffffffffffffff1690565b149081620006c7575b155b9081620006bd575b5062000692576200062c91836200062186620006178a620004a7565b98019788620004f7565b62000680576200072a565b6200063657505050565b62000641916200052c565b6200067b7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916200067160405190565b9182918262000552565b0390a1565b6200068c87876200052c565b6200072a565b6040517ff92ee8a9000000000000000000000000000000000000000000000000000000008152600490fd5b15905038620005fb565b9050620005f3620006d83062000146565b3b620006ec620006e888620004b7565b9190565b14919050620005f1565b5082620005c8565b906001600160a01b0390620004d3565b9062000722620000df620005139262000146565b8254620006fe565b906200073a620001099262001129565b60056200070e565b90620001099162000564565b620000df90620000d3565b620000df90546200074e565b0190565b156200077157565b60405162461bcd60e51b815260206004820152603060248201527f436f6e74726163742063616c6c6572206973206e6f742074686520726567697360448201527f7465726564206d657373656e67657221000000000000000000000000000000006064820152608490fd5b15620007e457565b60405162461bcd60e51b815260206004820152603160248201527f43726f737320636861696e206d65737361676520636f6d696e672066726f6d2060448201527f696e636f72726563742073656e646572210000000000000000000000000000006064820152608490fd5b906200010994939291620008af62000868600562000759565b6200087c620008766200119f565b62000769565b620008a86200089b6200088e620011c8565b926001600160a01b031690565b916001600160a01b031690565b14620007dc565b62000998565b634e487b7160e01b600052604160045260246000fd5b90826000939282370152565b9190620008f981620008f181620007659560209181520190565b8095620008cb565b601f01601f191690565b92906200092390620000df959360408601918683036000880152620008d7565b926020818503910152620008d7565b6040513d6000823e3d90fd5b949293620000df96946200097b62000989946200096b60808a019560008b01906001600160a01b03169052565b6001600160a01b03166020890152565b8683036040880152620008d7565b926060818503910152620008d7565b919093620009a560405190565b6117c7810181811067ffffffffffffffff82111762000a6c57620009d78387868a86956117c762001524883962000903565b03906000f093841562000a66576200067b9262000a0c620009f88762000146565b9662000a0688600262000151565b6200070e565b62000a1e8562000a0688600362000151565b62000a308662000a0687600462000151565b7f30c05779f384e0ae9d43bbf7ec4417f28bdc53d02a35551b6eb270a9c4c71dca9662000a5c60405190565b968796876200093e565b62000932565b620008b5565b9062000109949392916200084f565b620000d3620000df620000df9290565b620000df9062000a81565b62000ac162000abb62000ac79262000ab2600090565b50600262000151565b62000759565b62000146565b62000adb6200089b620000d3600062000a91565b141590565b1562000ae857565b60405162461bcd60e51b815260206004820152600d60248201527f4e6f7468696e672073656e742e000000000000000000000000000000000000006044820152606490fd5b6001600160a01b0390911681526060810193926200010992909160409162000b56906020830152565b01906001600160a01b03169052565b90601f01601f1916810190811067ffffffffffffffff82111762000a6c57604052565b634e487b7160e01b600052602160045260246000fd5b6003111562000ba957565b62000b88565b90620001098262000b9e565b620000df9062000baf565b62000476620000df620000df9290565b6000910312620000f557565b6001600160a01b039091168152604081019291620001099160200152565b3460009162000c1b62000c1384620004b7565b831162000ae0565b62000ca9600462000c736383bece4d60e01b62000c63858762000c4f62000abb600362000c488d62000a91565b9062000151565b604051968795602087019081520162000b2d565b6020820181038252038262000b65565b62000c7f600562000759565b9062000c8b8662000bbb565b62000c9687620004b7565b9162000ca28862000bc6565b936200141a565b62000cb762000ac1620011bc565b9063346633fb91803b15620000f55762000ce884869462000cf462000cdb60405190565b9788968795869460e01b90565b84526004840162000be2565b03925af1801562000a665762000d08575050565b816200010992903d1062000d2c575b62000d23818362000b65565b81019062000bd6565b503d62000d17565b1562000d3c57565b60405162461bcd60e51b815260206004820152601560248201527f4e6f206d617070696e6720666f7220746f6b656e2e00000000000000000000006044820152606490fd5b62000d9662000d908262000a9c565b62000d34565b62000dab62000ac162000abb83600262000151565b90631dd319cb33833b15620000f557849362000ce86000809462000ddf62000dd260405190565b9889968795869460e01b90565b03925af1801562000a6657620001099460049462000e1c9462000c639362000e4e575b5062000c4f62000abb6383bece4d60e01b95600362000151565b62000e28600562000759565b9060009062000e378262000bbb565b9062000ca262000e4784620004b7565b9362000bc6565b62000e6190600062000d23818362000b65565b3862000e02565b9062000109929162000e7f62000868600562000759565b62000ef8565b1562000e8d57565b60405162461bcd60e51b815260206004820152602b60248201527f526563656976696e672061737365747320666f7220756e6b6e6f776e2077726160448201527f7070656420746f6b656e210000000000000000000000000000000000000000006064820152608490fd5b919062000f2062000ac162000abb62000f1862000abb6004978862000151565b600262000151565b9260009362000f4962000f37620000d38762000a91565b6001600160a01b038316141562000e85565b63979005ad813b15620000f5578562000f799162000cf4829662000f6c60405190565b9889978896879560e01b90565b8552840162000be2565b9062000109929162000e68565b60405162461bcd60e51b815260206004820152601d60248201527f66616c6c6261636b2829206d6574686f6420756e737570706f727465640000006044820152606490fd5b60405162461bcd60e51b815260206004820152602360248201527f436f6e747261637420646f6573206e6f7420737570706f72742072656365697660448201527f65282900000000000000000000000000000000000000000000000000000000006064820152608490fd5b62000109906200104f62001134565b6200107b565b905051906200010982620000e2565b90602082820312620000f557620000df9162001055565b6200108a620010929162000146565b60006200070e565b620010c16020620010a862000ac1600062000759565b63a1a227fa90620010b860405190565b93849260e01b90565b825260049082905afa90811562000a66576200010991620010ec91600091620010f4575b5062000146565b60016200070e565b6200111a915060203d811162001121575b62001111818362000b65565b81019062001064565b38620010e5565b503d62001105565b620001099062001040565b620011426200059b62001174565b6200114957565b6040517fd7e6bcf8000000000000000000000000000000000000000000000000000000008152600490fd5b620000df7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a006200047c565b33620011b86200089b620000d362000ac1600062000759565b1490565b620000df600162000759565b620011ee6020620011de62000ac1600062000759565b6363012de590620010b860405190565b825260049082905afa90811562000a66576000916200120b575090565b620000df915060203d8111620011215762001111818362000b65565b90620001096200123660405190565b928362000b65565b620000df606062001227565b60005b8381106200125e5750506000910152565b81810151838201526020016200124d565b62001294620008f9602093620007659362001288815190565b80835293849260200190565b958691016200124a565b80516001600160a01b0316825290620000df90604080620012cf60608401602087015185820360208701526200126f565b940151910152565b6020808252620000df929101906200129e565b620000df9060a01c5b63ffffffff1690565b620000df9054620012ea565b634e487b7160e01b600052601160045260246000fd5b63ffffffff1663ffffffff8114620013365760010190565b62001308565b9077ffffffff00000000000000000000000000000000000000009060a01b620004d3565b620012f3620000df620000df9263ffffffff1690565b906200138a620000df620005139262001360565b82546200133c565b67ffffffffffffffff8116620000ed565b90505190620001098262001392565b90602082820312620000f557620000df91620013a3565b9493916060916200010994620014026200141093620013f560808b019460008c019063ffffffff169052565b63ffffffff1660208a0152565b87820360408901526200126f565b94019060ff169052565b9193906020936200144c620014539262001446620014376200123e565b6001600160a01b039097168752565b86860152565b6040840152565b6200147f6200146160405190565b8093620014728683019182620012d7565b9081038252038362000b65565b620014d460006200149562000ac1600162000759565b92620014e063b1454caa91620014ac6001620012fc565b96620014c4620014bc896200131e565b600162001376565b604051998a988997889660e01b90565b865260048601620013c9565b03925af1801562000a6657620014f35750565b620015189060203d81116200151b575b6200150f818362000b65565b810190620013b2565b50565b503d6200150356fe60806040523462000031576200001f6200001862000175565b906200019c565b60405161123262000595823961123290f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200006e57604052565b62000036565b906200008b6200008360405190565b92836200004c565b565b6001600160401b0381116200006e57602090601f01601f19160190565b60005b838110620000be5750506000910152565b8181015183820152602001620000ad565b90929192620000e8620000e2826200008d565b62000074565b9381855260208501908284011162000031576200008b92620000aa565b9080601f83011215620000315781516200012292602001620000cf565b90565b919091604081840312620000315780516001600160401b0381116200003157836200015291830162000105565b60208201519093906001600160401b038111620000315762000122920162000105565b62000198620017c7803803806200018c8162000074565b92833981019062000125565b9091565b90620001a891620001d7565b620001d4337fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775620004d5565b50565b6200008b9182918291829162000255565b906001600160a01b03905b9181191691161790565b620001229062000213906001600160a01b031682565b6001600160a01b031690565b6200012290620001fd565b62000122906200021f565b90620002496200012262000251926200022a565b8254620001e8565b9055565b9062000261916200047a565b6200008b73deb34a740eca1ec42c8b8204cbec0ba34fdd27f3600562000235565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015620002bb575b6020831014620002b557565b62000282565b91607f1691620002a9565b9160001960089290920291821b911b620001f3565b6200012262000122620001229290565b919062000300620001226200025193620002db565b908354620002c6565b6200008b91600091620002eb565b81811062000323575050565b8062000333600060019362000309565b0162000317565b9190601f81116200034a57505050565b6200035e6200008b93600052602060002090565b906020601f84018190048301931062000382575b6020601f90910104019062000317565b909150819062000372565b9062000397815190565b906001600160401b0382116200006e57620003bf82620003b8855462000298565b856200033a565b602090601f8311600114620003fe5762000251929160009183620003f2575b5050600019600883021c1916906002021790565b015190503880620003de565b601f198316916200041485600052602060002090565b9260005b81811062000455575091600293918560019694106200043b575b50505002019055565b01516000196008601f8516021c1916905538808062000432565b9193602060018192878701518155019501920162000418565b906200008b916200038d565b906200048c6200008b9260036200046e565b60046200046e565b905b600052602052604060002090565b9062000496906200022a565b9060ff90620001f3565b90620004cd620001226200025192151590565b8254620004b0565b620004e9620004e583836200056b565b1590565b1562000564576001916200051883620005128360006200050b87600762000494565b01620004a4565b620004ba565b3390620005526200054b6200054b7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b926200022a565b926200055d60405190565b600090a490565b5050600090565b620001229160006200050b6200058d9362000584600090565b50600762000494565b5460ff169056fe6080604052600436101561001257600080fd5b60003560e01c806301ffc9a71461014257806306fdde031461013d578063095ea7b31461013857806318160ddd146101335780631dd319cb1461012e57806323b872dd14610129578063248a9ca3146101245780632f2ff15d1461011f578063313ce5671461011a57806336568abe1461011557806370a082311461011057806375b238fc1461010b57806391d148541461010657806395d89b4114610101578063979005ad146100fc578063a217fddf146100f7578063a9059cbb146100f2578063d547741f146100ed5763dd62ed3e0361017257610570565b61053d565b610521565b610506565b6104ce565b6104b3565b610497565b61045e565b610443565b610416565b6103e7565b6103ce565b610390565b610360565b610312565b6102e6565b6102ca565b610245565b61019d565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b0361017257565b600080fd5b9050359061018482610147565b565b906020828203126101725761019a91610177565b90565b34610172576101ca6101b86101b3366004610186565b61058c565b60405191829182901515815260200190565b0390f35b600091031261017257565b60005b8381106101ec5750506000910152565b81810151838201526020016101dc565b61021d61022660209361023093610211815190565b80835293849260200190565b958691016101d9565b601f01601f191690565b0190565b602080825261019a929101906101fc565b34610172576102553660046101ce565b6101ca610260610a37565b60405191829182610234565b6001600160a01b031690565b6001600160a01b03811661016b565b9050359061018482610278565b8061016b565b9050359061018482610294565b91906040838203126101725761019a906102c18185610287565b9360200161029a565b34610172576101ca6101b86102e03660046102a7565b90610a81565b34610172576102f63660046101ce565b6101ca610301610a62565b6040515b9182918290815260200190565b346101725761032b6103253660046102a7565b906111b4565b604051005b90916060828403126101725761019a6103498484610287565b936103578160208601610287565b9360400161029a565b34610172576101ca6101b8610376366004610330565b91610a8c565b906020828203126101725761019a9161029a565b34610172576101ca6103016103a636600461037c565b6106b8565b91906040838203126101725761019a906103c5818561029a565b93602001610287565b346101725761032b6103e13660046103ab565b906106f2565b34610172576103f73660046101ce565b6101ca610402610a58565b6040519182918260ff909116815260200190565b346101725761032b6104293660046103ab565b906107a6565b906020828203126101725761019a91610287565b34610172576101ca61030161045936600461042f565b610f05565b346101725761046e3660046101ce565b6101ca7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610301565b34610172576101ca6101b86104ad3660046103ab565b9061067f565b34610172576104c33660046101ce565b6101ca610260610a41565b346101725761032b6104e13660046102a7565b906110d0565b61019a61019a61019a9290565b61019a60006104e7565b61019a6104f4565b34610172576105163660046101ce565b6101ca6103016104fe565b34610172576101ca6101b86105373660046102a7565b90610a6c565b346101725761032b6105503660046103ab565b9061079c565b91906040838203126101725761019a906103c58185610287565b34610172576101ca610301610586366004610556565b90610f9e565b7f7965db0b000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216149081156105dc575090565b61019a91507fffffffff00000000000000000000000000000000000000000000000000000000167f01ffc9a7000000000000000000000000000000000000000000000000000000001490565b905b600052602052604060002090565b61026c61019a61019a926001600160a01b031690565b61019a90610638565b61019a9061064e565b9061062a90610657565b61019a905b60ff1690565b61019a905461066a565b61019a91600061069c6106a293610694600090565b506007610628565b01610660565b610675565b61019a9081565b61019a90546106a7565b60016106c961019a92610694600090565b016106ae565b90610184916106e56106e0826106b8565b6106fc565b906106ef9161081d565b50565b90610184916106cf565b610184903390610728565b6001600160a01b0390911681526040810192916101849160200152565b0152565b9061073a610736828461067f565b1590565b610742575050565b61077d61074e60405190565b9283927fe2517d3f00000000000000000000000000000000000000000000000000000000845260048401610707565b0390fd5b90610184916107926106e0826106b8565b906106ef9161089a565b9061018491610781565b906107b03361026c565b6001600160a01b038216036107c8576106ef9161089a565b6040517f6697b232000000000000000000000000000000000000000000000000000000008152600490fd5b9060ff905b9181191691161790565b9061081261019a61081992151590565b82546107f3565b9055565b61082a610736838361067f565b156108935760019161084c8361084783600061069c876007610628565b610802565b339061088261087c61087c7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b92610657565b9261088c60405190565b600090a490565b5050600090565b906108a5818361067f565b15610893576108bf6000610847838261069c876007610628565b33906108ef61087c61087c7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b926108f960405190565b600090a4600190565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610938575b602083101461093357565b610902565b91607f1691610928565b8054600093929161095f61095583610918565b8085529360200190565b91600181169081156109b1575060011461097857505050565b61098b9192939450600052602060002090565b916000925b81841061099d5750500190565b805484840152602090930192600101610990565b92949550505060ff1916825215156020020190565b9061019a91610942565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff821117610a0857604052565b6109d0565b90610184610a2792610a1e60405190565b938480926109c6565b03836109e6565b61019a90610a0d565b61019a6003610a2e565b61019a6004610a2e565b61066f61019a61019a9290565b61019a6012610a4b565b61019a60026106ae565b610a7c919033610ab3565b610ab3565b600190565b610a7c919033610d52565b610a7c929190610a77833383610e81565b61026c61019a61019a9290565b61019a90610a9d565b929190610ac06000610aaa565b936001600160a01b0385166001600160a01b03821614610b48576001600160a01b0385166001600160a01b03831614610afe57610184939450610c02565b61077d85610b0b60405190565b9182917fec442f05000000000000000000000000000000000000000000000000000000008352600483016001600160a01b03909116815260200190565b61077d85610b5560405190565b9182917f96c6fd1e000000000000000000000000000000000000000000000000000000008352600483016001600160a01b03909116815260200190565b6001600160a01b039091168152606081019392610184929091604091610724906020830152565b90600019906107f8565b90610bd361019a610819926104e7565b8254610bb9565b634e487b7160e01b600052601160045260246000fd5b91908201809211610bfd57565b610bda565b816000610c0e81610aaa565b6001600160a01b0381166001600160a01b03851603610cd857610c489061026c610c4188610c3c60026106ae565b610bf0565b6002610bc3565b6001600160a01b03831603610cb3575050610c6e610c4184610c6a60026106ae565b0390565b610cae610ca4610c9e7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610657565b93610657565b9361030560405190565b0390a3565b610cd391610cc091610660565b610ccd85610230836106ae565b90610bc3565b610c6e565b909150610ced610ce88484610660565b6106ae565b858110610d155784929161026c610d0688610c48940390565b610d108786610660565b610bc3565b8361077d87610d2360405190565b9384937fe450d38c00000000000000000000000000000000000000000000000000000000855260048501610b92565b9091610184926001925b909192610d696000610aaa565b6001600160a01b0381166001600160a01b03841614610e37576001600160a01b0381166001600160a01b03851614610ded5750610db484610d1085610daf866001610660565b610660565b610dbd57505050565b610cae610ca4610c9e7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610657565b61077d90610dfa60405190565b9182917f94280d62000000000000000000000000000000000000000000000000000000008352600483016001600160a01b03909116815260200190565b61077d90610e4460405190565b9182917fe602df05000000000000000000000000000000000000000000000000000000008352600483016001600160a01b03909116815260200190565b90929192610e8f8183610f9e565b936000198503610ea1575b5050509050565b808510610ec757610eb590610ebe94950390565b90600092610d5c565b80388080610e9a565b9061077d8592610ed660405190565b9384937ffb8f41b200000000000000000000000000000000000000000000000000000000855260048501610b92565b32610f216001600160a01b0383165b916001600160a01b031690565b14610f835733610f396001600160a01b038316610f14565b14610f835760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420616c6c6f77656420746f2072656164207468652062616c616e6365006044820152606490fd5b61019a90610ce861019a91610f96600090565b506000610660565b90326001600160a01b0383168114908115611062575b5061103e57336001600160a01b0383168114908115611047575b5061103e5760405162461bcd60e51b815260206004820152602160248201527f4e6f7420616c6c6f77656420746f20726561642074686520616c6c6f77616e6360448201527f65000000000000000000000000000000000000000000000000000000000000006064820152608490fd5b61019a9161107d565b905061105b6001600160a01b038316610f14565b1438610fce565b90506110766001600160a01b038316610f14565b1438610fb4565b61019a91610daf610ce892611090600090565b506001610660565b61018491906110c67fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756106fc565b90610184916110da565b9061018491611098565b91906110e66000610aaa565b926001600160a01b0384166001600160a01b0382161461110a576101849293610c02565b61077d84610b0b60405190565b61018491906111457fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756106fc565b611196565b1561115157565b60405162461bcd60e51b815260206004820152601560248201527f496e73756666696369656e742062616c616e63652e00000000000000000000006044820152606490fd5b90610184916111af6111a782610f05565b83111561114a565b6111be565b9061018491611117565b91906111ca6000610aaa565b926001600160a01b0384166001600160a01b038216146111ef57926101849293610c02565b61077d84610b556040519056fea264697066735822122079eebf01d093afea82357215e4515e77a037e9fc967cff9adeeffb005ff0d0bd64736f6c63430008140033a26469706673582212209a640526e5cb5c8f83dfd23a5d720789c63b166b4fa865c4f21523cd2096936764736f6c63430008140033",
}

// EthereumBridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use EthereumBridgeMetaData.ABI instead.
var EthereumBridgeABI = EthereumBridgeMetaData.ABI

// EthereumBridgeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EthereumBridgeMetaData.Bin instead.
var EthereumBridgeBin = EthereumBridgeMetaData.Bin

// DeployEthereumBridge deploys a new Ethereum contract, binding an instance of EthereumBridge to it.
func DeployEthereumBridge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EthereumBridge, error) {
	parsed, err := EthereumBridgeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EthereumBridgeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EthereumBridge{EthereumBridgeCaller: EthereumBridgeCaller{contract: contract}, EthereumBridgeTransactor: EthereumBridgeTransactor{contract: contract}, EthereumBridgeFilterer: EthereumBridgeFilterer{contract: contract}}, nil
}

// EthereumBridge is an auto generated Go binding around an Ethereum contract.
type EthereumBridge struct {
	EthereumBridgeCaller     // Read-only binding to the contract
	EthereumBridgeTransactor // Write-only binding to the contract
	EthereumBridgeFilterer   // Log filterer for contract events
}

// EthereumBridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthereumBridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthereumBridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthereumBridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthereumBridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthereumBridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthereumBridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthereumBridgeSession struct {
	Contract     *EthereumBridge   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EthereumBridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthereumBridgeCallerSession struct {
	Contract *EthereumBridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// EthereumBridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthereumBridgeTransactorSession struct {
	Contract     *EthereumBridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// EthereumBridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthereumBridgeRaw struct {
	Contract *EthereumBridge // Generic contract binding to access the raw methods on
}

// EthereumBridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthereumBridgeCallerRaw struct {
	Contract *EthereumBridgeCaller // Generic read-only contract binding to access the raw methods on
}

// EthereumBridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthereumBridgeTransactorRaw struct {
	Contract *EthereumBridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthereumBridge creates a new instance of EthereumBridge, bound to a specific deployed contract.
func NewEthereumBridge(address common.Address, backend bind.ContractBackend) (*EthereumBridge, error) {
	contract, err := bindEthereumBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthereumBridge{EthereumBridgeCaller: EthereumBridgeCaller{contract: contract}, EthereumBridgeTransactor: EthereumBridgeTransactor{contract: contract}, EthereumBridgeFilterer: EthereumBridgeFilterer{contract: contract}}, nil
}

// NewEthereumBridgeCaller creates a new read-only instance of EthereumBridge, bound to a specific deployed contract.
func NewEthereumBridgeCaller(address common.Address, caller bind.ContractCaller) (*EthereumBridgeCaller, error) {
	contract, err := bindEthereumBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeCaller{contract: contract}, nil
}

// NewEthereumBridgeTransactor creates a new write-only instance of EthereumBridge, bound to a specific deployed contract.
func NewEthereumBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*EthereumBridgeTransactor, error) {
	contract, err := bindEthereumBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeTransactor{contract: contract}, nil
}

// NewEthereumBridgeFilterer creates a new log filterer instance of EthereumBridge, bound to a specific deployed contract.
func NewEthereumBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*EthereumBridgeFilterer, error) {
	contract, err := bindEthereumBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeFilterer{contract: contract}, nil
}

// bindEthereumBridge binds a generic wrapper to an already deployed contract.
func bindEthereumBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := EthereumBridgeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthereumBridge *EthereumBridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthereumBridge.Contract.EthereumBridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthereumBridge *EthereumBridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthereumBridge.Contract.EthereumBridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthereumBridge *EthereumBridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthereumBridge.Contract.EthereumBridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthereumBridge *EthereumBridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthereumBridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthereumBridge *EthereumBridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthereumBridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthereumBridge *EthereumBridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthereumBridge.Contract.contract.Transact(opts, method, params...)
}

// HasTokenMapping is a free data retrieval call binding the contract method 0x9813c7b2.
//
// Solidity: function hasTokenMapping(address wrappedToken) view returns(bool)
func (_EthereumBridge *EthereumBridgeCaller) HasTokenMapping(opts *bind.CallOpts, wrappedToken common.Address) (bool, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "hasTokenMapping", wrappedToken)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasTokenMapping is a free data retrieval call binding the contract method 0x9813c7b2.
//
// Solidity: function hasTokenMapping(address wrappedToken) view returns(bool)
func (_EthereumBridge *EthereumBridgeSession) HasTokenMapping(wrappedToken common.Address) (bool, error) {
	return _EthereumBridge.Contract.HasTokenMapping(&_EthereumBridge.CallOpts, wrappedToken)
}

// HasTokenMapping is a free data retrieval call binding the contract method 0x9813c7b2.
//
// Solidity: function hasTokenMapping(address wrappedToken) view returns(bool)
func (_EthereumBridge *EthereumBridgeCallerSession) HasTokenMapping(wrappedToken common.Address) (bool, error) {
	return _EthereumBridge.Contract.HasTokenMapping(&_EthereumBridge.CallOpts, wrappedToken)
}

// LocalToRemoteToken is a free data retrieval call binding the contract method 0x9e405b71.
//
// Solidity: function localToRemoteToken(address ) view returns(address)
func (_EthereumBridge *EthereumBridgeCaller) LocalToRemoteToken(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "localToRemoteToken", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LocalToRemoteToken is a free data retrieval call binding the contract method 0x9e405b71.
//
// Solidity: function localToRemoteToken(address ) view returns(address)
func (_EthereumBridge *EthereumBridgeSession) LocalToRemoteToken(arg0 common.Address) (common.Address, error) {
	return _EthereumBridge.Contract.LocalToRemoteToken(&_EthereumBridge.CallOpts, arg0)
}

// LocalToRemoteToken is a free data retrieval call binding the contract method 0x9e405b71.
//
// Solidity: function localToRemoteToken(address ) view returns(address)
func (_EthereumBridge *EthereumBridgeCallerSession) LocalToRemoteToken(arg0 common.Address) (common.Address, error) {
	return _EthereumBridge.Contract.LocalToRemoteToken(&_EthereumBridge.CallOpts, arg0)
}

// RemoteToLocalToken is a free data retrieval call binding the contract method 0x008d48e3.
//
// Solidity: function remoteToLocalToken(address ) view returns(address)
func (_EthereumBridge *EthereumBridgeCaller) RemoteToLocalToken(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "remoteToLocalToken", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RemoteToLocalToken is a free data retrieval call binding the contract method 0x008d48e3.
//
// Solidity: function remoteToLocalToken(address ) view returns(address)
func (_EthereumBridge *EthereumBridgeSession) RemoteToLocalToken(arg0 common.Address) (common.Address, error) {
	return _EthereumBridge.Contract.RemoteToLocalToken(&_EthereumBridge.CallOpts, arg0)
}

// RemoteToLocalToken is a free data retrieval call binding the contract method 0x008d48e3.
//
// Solidity: function remoteToLocalToken(address ) view returns(address)
func (_EthereumBridge *EthereumBridgeCallerSession) RemoteToLocalToken(arg0 common.Address) (common.Address, error) {
	return _EthereumBridge.Contract.RemoteToLocalToken(&_EthereumBridge.CallOpts, arg0)
}

// WrappedTokens is a free data retrieval call binding the contract method 0xd5c6b504.
//
// Solidity: function wrappedTokens(address ) view returns(address)
func (_EthereumBridge *EthereumBridgeCaller) WrappedTokens(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _EthereumBridge.contract.Call(opts, &out, "wrappedTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WrappedTokens is a free data retrieval call binding the contract method 0xd5c6b504.
//
// Solidity: function wrappedTokens(address ) view returns(address)
func (_EthereumBridge *EthereumBridgeSession) WrappedTokens(arg0 common.Address) (common.Address, error) {
	return _EthereumBridge.Contract.WrappedTokens(&_EthereumBridge.CallOpts, arg0)
}

// WrappedTokens is a free data retrieval call binding the contract method 0xd5c6b504.
//
// Solidity: function wrappedTokens(address ) view returns(address)
func (_EthereumBridge *EthereumBridgeCallerSession) WrappedTokens(arg0 common.Address) (common.Address, error) {
	return _EthereumBridge.Contract.WrappedTokens(&_EthereumBridge.CallOpts, arg0)
}

// Configure is a paid mutator transaction binding the contract method 0x75cb2672.
//
// Solidity: function configure(address messengerAddress) returns()
func (_EthereumBridge *EthereumBridgeTransactor) Configure(opts *bind.TransactOpts, messengerAddress common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "configure", messengerAddress)
}

// Configure is a paid mutator transaction binding the contract method 0x75cb2672.
//
// Solidity: function configure(address messengerAddress) returns()
func (_EthereumBridge *EthereumBridgeSession) Configure(messengerAddress common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.Configure(&_EthereumBridge.TransactOpts, messengerAddress)
}

// Configure is a paid mutator transaction binding the contract method 0x75cb2672.
//
// Solidity: function configure(address messengerAddress) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) Configure(messengerAddress common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.Configure(&_EthereumBridge.TransactOpts, messengerAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address messenger, address remoteBridge) returns()
func (_EthereumBridge *EthereumBridgeTransactor) Initialize(opts *bind.TransactOpts, messenger common.Address, remoteBridge common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "initialize", messenger, remoteBridge)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address messenger, address remoteBridge) returns()
func (_EthereumBridge *EthereumBridgeSession) Initialize(messenger common.Address, remoteBridge common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.Initialize(&_EthereumBridge.TransactOpts, messenger, remoteBridge)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address messenger, address remoteBridge) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) Initialize(messenger common.Address, remoteBridge common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.Initialize(&_EthereumBridge.TransactOpts, messenger, remoteBridge)
}

// OnCreateTokenCommand is a paid mutator transaction binding the contract method 0x458ffd63.
//
// Solidity: function onCreateTokenCommand(address crossChainAddress, string name, string symbol) returns()
func (_EthereumBridge *EthereumBridgeTransactor) OnCreateTokenCommand(opts *bind.TransactOpts, crossChainAddress common.Address, name string, symbol string) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "onCreateTokenCommand", crossChainAddress, name, symbol)
}

// OnCreateTokenCommand is a paid mutator transaction binding the contract method 0x458ffd63.
//
// Solidity: function onCreateTokenCommand(address crossChainAddress, string name, string symbol) returns()
func (_EthereumBridge *EthereumBridgeSession) OnCreateTokenCommand(crossChainAddress common.Address, name string, symbol string) (*types.Transaction, error) {
	return _EthereumBridge.Contract.OnCreateTokenCommand(&_EthereumBridge.TransactOpts, crossChainAddress, name, symbol)
}

// OnCreateTokenCommand is a paid mutator transaction binding the contract method 0x458ffd63.
//
// Solidity: function onCreateTokenCommand(address crossChainAddress, string name, string symbol) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) OnCreateTokenCommand(crossChainAddress common.Address, name string, symbol string) (*types.Transaction, error) {
	return _EthereumBridge.Contract.OnCreateTokenCommand(&_EthereumBridge.TransactOpts, crossChainAddress, name, symbol)
}

// ReceiveAssets is a paid mutator transaction binding the contract method 0x83bece4d.
//
// Solidity: function receiveAssets(address asset, uint256 amount, address receiver) returns()
func (_EthereumBridge *EthereumBridgeTransactor) ReceiveAssets(opts *bind.TransactOpts, asset common.Address, amount *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "receiveAssets", asset, amount, receiver)
}

// ReceiveAssets is a paid mutator transaction binding the contract method 0x83bece4d.
//
// Solidity: function receiveAssets(address asset, uint256 amount, address receiver) returns()
func (_EthereumBridge *EthereumBridgeSession) ReceiveAssets(asset common.Address, amount *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.ReceiveAssets(&_EthereumBridge.TransactOpts, asset, amount, receiver)
}

// ReceiveAssets is a paid mutator transaction binding the contract method 0x83bece4d.
//
// Solidity: function receiveAssets(address asset, uint256 amount, address receiver) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) ReceiveAssets(asset common.Address, amount *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.ReceiveAssets(&_EthereumBridge.TransactOpts, asset, amount, receiver)
}

// SendERC20 is a paid mutator transaction binding the contract method 0xa381c8e2.
//
// Solidity: function sendERC20(address asset, uint256 amount, address receiver) returns()
func (_EthereumBridge *EthereumBridgeTransactor) SendERC20(opts *bind.TransactOpts, asset common.Address, amount *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "sendERC20", asset, amount, receiver)
}

// SendERC20 is a paid mutator transaction binding the contract method 0xa381c8e2.
//
// Solidity: function sendERC20(address asset, uint256 amount, address receiver) returns()
func (_EthereumBridge *EthereumBridgeSession) SendERC20(asset common.Address, amount *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.SendERC20(&_EthereumBridge.TransactOpts, asset, amount, receiver)
}

// SendERC20 is a paid mutator transaction binding the contract method 0xa381c8e2.
//
// Solidity: function sendERC20(address asset, uint256 amount, address receiver) returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) SendERC20(asset common.Address, amount *big.Int, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.SendERC20(&_EthereumBridge.TransactOpts, asset, amount, receiver)
}

// SendNative is a paid mutator transaction binding the contract method 0x1888d712.
//
// Solidity: function sendNative(address receiver) payable returns()
func (_EthereumBridge *EthereumBridgeTransactor) SendNative(opts *bind.TransactOpts, receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.contract.Transact(opts, "sendNative", receiver)
}

// SendNative is a paid mutator transaction binding the contract method 0x1888d712.
//
// Solidity: function sendNative(address receiver) payable returns()
func (_EthereumBridge *EthereumBridgeSession) SendNative(receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.SendNative(&_EthereumBridge.TransactOpts, receiver)
}

// SendNative is a paid mutator transaction binding the contract method 0x1888d712.
//
// Solidity: function sendNative(address receiver) payable returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) SendNative(receiver common.Address) (*types.Transaction, error) {
	return _EthereumBridge.Contract.SendNative(&_EthereumBridge.TransactOpts, receiver)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_EthereumBridge *EthereumBridgeTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _EthereumBridge.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_EthereumBridge *EthereumBridgeSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _EthereumBridge.Contract.Fallback(&_EthereumBridge.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _EthereumBridge.Contract.Fallback(&_EthereumBridge.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_EthereumBridge *EthereumBridgeTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthereumBridge.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_EthereumBridge *EthereumBridgeSession) Receive() (*types.Transaction, error) {
	return _EthereumBridge.Contract.Receive(&_EthereumBridge.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_EthereumBridge *EthereumBridgeTransactorSession) Receive() (*types.Transaction, error) {
	return _EthereumBridge.Contract.Receive(&_EthereumBridge.TransactOpts)
}

// EthereumBridgeCreatedWrappedTokenIterator is returned from FilterCreatedWrappedToken and is used to iterate over the raw logs and unpacked data for CreatedWrappedToken events raised by the EthereumBridge contract.
type EthereumBridgeCreatedWrappedTokenIterator struct {
	Event *EthereumBridgeCreatedWrappedToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthereumBridgeCreatedWrappedTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthereumBridgeCreatedWrappedToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthereumBridgeCreatedWrappedToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthereumBridgeCreatedWrappedTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthereumBridgeCreatedWrappedTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthereumBridgeCreatedWrappedToken represents a CreatedWrappedToken event raised by the EthereumBridge contract.
type EthereumBridgeCreatedWrappedToken struct {
	RemoteAddress common.Address
	LocalAddress  common.Address
	Name          string
	Symbol        string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCreatedWrappedToken is a free log retrieval operation binding the contract event 0x30c05779f384e0ae9d43bbf7ec4417f28bdc53d02a35551b6eb270a9c4c71dca.
//
// Solidity: event CreatedWrappedToken(address remoteAddress, address localAddress, string name, string symbol)
func (_EthereumBridge *EthereumBridgeFilterer) FilterCreatedWrappedToken(opts *bind.FilterOpts) (*EthereumBridgeCreatedWrappedTokenIterator, error) {

	logs, sub, err := _EthereumBridge.contract.FilterLogs(opts, "CreatedWrappedToken")
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeCreatedWrappedTokenIterator{contract: _EthereumBridge.contract, event: "CreatedWrappedToken", logs: logs, sub: sub}, nil
}

// WatchCreatedWrappedToken is a free log subscription operation binding the contract event 0x30c05779f384e0ae9d43bbf7ec4417f28bdc53d02a35551b6eb270a9c4c71dca.
//
// Solidity: event CreatedWrappedToken(address remoteAddress, address localAddress, string name, string symbol)
func (_EthereumBridge *EthereumBridgeFilterer) WatchCreatedWrappedToken(opts *bind.WatchOpts, sink chan<- *EthereumBridgeCreatedWrappedToken) (event.Subscription, error) {

	logs, sub, err := _EthereumBridge.contract.WatchLogs(opts, "CreatedWrappedToken")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthereumBridgeCreatedWrappedToken)
				if err := _EthereumBridge.contract.UnpackLog(event, "CreatedWrappedToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreatedWrappedToken is a log parse operation binding the contract event 0x30c05779f384e0ae9d43bbf7ec4417f28bdc53d02a35551b6eb270a9c4c71dca.
//
// Solidity: event CreatedWrappedToken(address remoteAddress, address localAddress, string name, string symbol)
func (_EthereumBridge *EthereumBridgeFilterer) ParseCreatedWrappedToken(log types.Log) (*EthereumBridgeCreatedWrappedToken, error) {
	event := new(EthereumBridgeCreatedWrappedToken)
	if err := _EthereumBridge.contract.UnpackLog(event, "CreatedWrappedToken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthereumBridgeInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the EthereumBridge contract.
type EthereumBridgeInitializedIterator struct {
	Event *EthereumBridgeInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthereumBridgeInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthereumBridgeInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthereumBridgeInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthereumBridgeInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthereumBridgeInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthereumBridgeInitialized represents a Initialized event raised by the EthereumBridge contract.
type EthereumBridgeInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_EthereumBridge *EthereumBridgeFilterer) FilterInitialized(opts *bind.FilterOpts) (*EthereumBridgeInitializedIterator, error) {

	logs, sub, err := _EthereumBridge.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &EthereumBridgeInitializedIterator{contract: _EthereumBridge.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_EthereumBridge *EthereumBridgeFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *EthereumBridgeInitialized) (event.Subscription, error) {

	logs, sub, err := _EthereumBridge.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthereumBridgeInitialized)
				if err := _EthereumBridge.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_EthereumBridge *EthereumBridgeFilterer) ParseInitialized(log types.Log) (*EthereumBridgeInitialized, error) {
	event := new(EthereumBridgeInitialized)
	if err := _EthereumBridge.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
