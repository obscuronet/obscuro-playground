// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package SystemDeployer

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SystemDeployerMetaData contains all meta data concerning the SystemDeployer contract.
var SystemDeployerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eoaAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"SystemContractDeployed\",\"type\":\"event\"}]",
	Bin: "0x6080604052346200002e576200001e62000018620000d1565b620000f4565b604051603f620003818239603f90f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200006b57604052565b62000033565b90620000886200008060405190565b928362000049565b565b6001600160a01b031690565b90565b6001600160a01b038116036200002e57565b90505190620000888262000099565b906020828203126200002e576200009691620000ab565b620000966200285580380380620000e88162000071565b928339810190620000ba565b620000889062000164565b6040513d6000823e3d90fd5b62000096906200008a906001600160a01b031682565b62000096906200010b565b620000969062000121565b620001536200014d620000969263ffffffff1690565b60e01b90565b6001600160e01b03191690565b0190565b604051610f6581016001600160401b038111828210176200006b57620001918291610f65620018f0843990565b03906000f080156200028d576200020d916200020760049262000201620001bc63485cc95562000137565b620001f13386620001cc60405190565b98899460208601908152016001600160a01b0391821681529116602082015260400190565b6020820181038252038562000049565b6200012c565b62000335565b620002887fbd64e14789a915ea657e42f2dbf0b973227708fa64b58766287637985d1ade69916200023d60405190565b9182918260408082526014908201527f5472616e73616374696f6e73416e616c797a657200000000000000000000000060608201526001600160a01b03909116602082015260800190565b0390a1565b620000ff565b60005b838110620002a75750506000910152565b818101518382015260200162000296565b620002dd620002e76020936200016093620002d1815190565b80835293849260200190565b9586910162000293565b601f01601f191690565b620003276200009694929362000317606084019560008501906001600160a01b03169052565b6001600160a01b03166020830152565b6040818403910152620002b8565b90604051926115308401916001600160401b038311858410176200006b5784936200036993611530620003c08739620002f1565b03906000f080156200028d5762000096906200012c56fe6080604052600080fdfea26469706673582212206f83aeb0682bc5bc65354d3fe229ff3803d66fed38ec8d9ee0eb3b9865c0862964736f6c6343000814003360a060405262000019620000126200019f565b91620001ff565b6040516105e762000681823960805181603001526105e790f35b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200006b57604052565b62000033565b90620000886200008060405190565b928362000049565b565b6001600160a01b031690565b90565b6001600160a01b03811603620000ab57565b600080fd5b90505190620000888262000099565b6001600160401b0381116200006b57602090601f01601f19160190565b60005b838110620000f05750506000910152565b8181015183820152602001620000df565b909291926200011a6200011482620000bf565b62000071565b93818552602085019082840111620000ab576200008892620000dc565b9080601f83011215620000ab578151620000969260200162000101565b91606083830312620000ab576200016c8284620000b0565b926200017c8360208301620000b0565b60408201519093906001600160401b038111620000ab5762000096920162000137565b620001c26200153080380380620001b68162000071565b92833981019062000154565b909192565b6040513d6000823e3d90fd5b62000096906200008a906001600160a01b031682565b6200009690620001d3565b6200009690620001e9565b916200020c919262000288565b604051906108c882016001600160401b038111838210176200006b5782916200024b916108c862000c6885396001600160a01b03909116815260200190565b03906000f0801562000282576200026290620001f4565b608052620000886200027c6080516001600160a01b031690565b62000406565b620001c7565b906200008891620002a4565b6200009662000096620000969290565b90620002b08262000381565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b620002dc83620001f4565b90620002e760405190565b600090a2805162000301620002fd600062000294565b9190565b111562000316576200031391620005a5565b50565b50506200008862000543565b620000967f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc62000294565b9062000361620000966200037d92620001f4565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b6000813b62000394620002fd8362000294565b14620003b557906200008891620003ae6200009662000322565b016200034d565b620003e882620003c460405190565b634c9c8ce360e01b8152918291600483016001600160a01b03909116815260200190565b0390fd5b6001600160a01b0391821681529116602082015260400190565b6200008890620004156200049b565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91620004506200044660405190565b92839283620003ec565b0390a1620004d1565b620000967fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610362000294565b62000096906200008a565b62000096905462000484565b620000966000620004af6200009662000459565b016200048f565b6200008a62000096620000969290565b6200009690620004b6565b90600091620004e083620004c6565b926001600160a01b0384166001600160a01b03831614620005105762000088929350620003ae6200009662000459565b620003e8846200051f60405190565b633173bdd160e11b8152918291600483016001600160a01b03909116815260200190565b3462000554620002fd600062000294565b116200055c57565b60405163b398979f60e01b8152600490fd5b906200057e6200011483620000bf565b918252565b3d15620005a057620005953d6200056e565b903d6000602084013e565b606090565b6000806200009693620005b6606090565b50805190602001845af4620005ca62000583565b9190620005d857506200064d565b8151600090620005ec620002fd8362000294565b14908162000632575b50620005ff575090565b620003e8906200060e60405190565b639996b31560e01b8152918291600483016001600160a01b03909116815260200190565b905062000645620002fd833b9262000294565b1438620005f5565b80516200065f620002fd600062000294565b11156200066e57805190602001fd5b604051630a12f52160e11b8152600490fdfe608060405261000c61000e565b005b610016610027565b565b6001600160a01b031690565b90565b336100616100547f0000000000000000000000000000000000000000000000000000000000000000610018565b916001600160a01b031690565b036100e8577f4f1ef286000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000060003516146100e0576040517fd2b576ec000000000000000000000000000000000000000000000000000000008152600490fd5b0390fd5b6100166102ed565b6100f06100f5565b610156565b610024610140565b6100246100246100249290565b6100247f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6100fd565b546001600160a01b031690565b610024600061015061002461010a565b01610133565b60008091368280378136915af43d6000803e15610172573d6000f35b3d6000fd5b9093929384831161018f57841161018f578101920390565b600080fd5b6001600160a01b0381160361018f57565b9050359061001682610194565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761020357604052565b6101b2565b9061001661021560405190565b92836101e1565b67ffffffffffffffff811161020357602090601f01601f19160190565b90826000939282370152565b9092919261025a6102558261021c565b610208565b9381855260208501908284011161018f5761001692610239565b9080601f8301121561018f5781602061002493359101610245565b91909160408184031261018f576102a683826101a5565b92602082013567ffffffffffffffff811161018f576100249201610274565b610018610024610024926001600160a01b031690565b610024906102c5565b610024906102db565b61001661032361031c6103146103103660008161030a60046100fd565b91610177565b9091565b81019061028f565b91906102e4565b9061032d826103ef565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b610357836102e4565b9061036160405190565b600090a2805161037861037460006100fd565b9190565b111561038a57610387916104c7565b50565b5050610016610456565b6001600160a01b03909116815260200190565b906103b76100246103eb926102e4565b82547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03919091161790565b9055565b6000813b6103ff610374836100fd565b1461041a57906100169161041461002461010a565b016103a7565b6100dc8261042760405190565b9182917f4c9c8ce300000000000000000000000000000000000000000000000000000000835260048301610394565b3461046461037460006100fd565b1161046b57565b6040517fb398979f000000000000000000000000000000000000000000000000000000008152600490fd5b906104a36102558361021c565b918252565b3d156104c2576104b73d610496565b903d6000602084013e565b606090565b600080610024936104d6606090565b50805190602001845af46104e86104a8565b91906104f45750610569565b8151600090610505610374836100fd565b149081610552575b50610516575090565b6100dc9061052360405190565b9182917f9996b31500000000000000000000000000000000000000000000000000000000835260048301610394565b9050610562610374833b926100fd565b143861050d565b805161057861037460006100fd565b111561058657805190602001fd5b6040517f1425ea42000000000000000000000000000000000000000000000000000000008152600490fdfea2646970667358221220782f2801dba6b92d163f770087c095f4a3bcf48f3a41dbeafc28edfa481d940f64736f6c6343000814003360806040523462000030576200001e62000018620000d3565b620000f6565b60405161066362000265823961066390f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200006d57604052565b62000035565b906200008a6200008260405190565b92836200004b565b565b6001600160a01b031690565b90565b6001600160a01b038116036200003057565b905051906200008a826200009b565b9060208282031262000030576200009891620000ad565b62000098620008c880380380620000ea8162000073565b928339810190620000bc565b6200008a906200012f565b6200008c62000098620000989290565b620000989062000101565b6001600160a01b03909116815260200190565b6200013b600062000111565b6001600160a01b0381166001600160a01b038316146200016157506200008a9062000202565b62000187906200017060405190565b631e4fbdf760e01b8152918291600483016200011c565b0390fd5b62000098906200008c565b6200009890546200018b565b62000098906200008c906001600160a01b031682565b6200009890620001a2565b6200009890620001b8565b90620001e262000098620001fe92620001c3565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b6200020e600062000196565b906200021c816000620001ce565b620002536200024c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093620001c3565b91620001c3565b916200025e60405190565b600090a356fe6080604052600436101561001257600080fd5b60003560e01c8063715018a6146100625780638da5cb5b1461005d5780639623609d14610058578063ad3cb1cc146100535763f2fde38b036100725761035a565b61031f565b610246565b6100a9565b610077565b600091031261007257565b600080fd5b3461007257610087366004610067565b61008f6103aa565b604051005b0390f35b6001600160a01b031690565b90565b565b34610072576100b9366004610067565b6100946100ce6000546001600160a01b031690565b604051918291826001600160a01b03909116815260200190565b6001600160a01b0381165b0361007257565b905035906100a7826100e8565b6001600160a01b0381166100f3565b905035906100a782610107565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761017457604052565b610123565b906100a761018660405190565b9283610152565b67ffffffffffffffff811161017457602090601f01601f19160190565b0190565b90826000939282370152565b909291926101cf6101ca8261018d565b610179565b93818552602085019082840111610072576100a7926101ae565b9080601f83011215610072578160206100a4933591016101ba565b916060838303126100725761021982846100fa565b926102278360208301610116565b92604082013567ffffffffffffffff8111610072576100a492016101e9565b61008f610254366004610204565b91610622565b906102676101ca8361018d565b918252565b610276600561025a565b7f352e302e30000000000000000000000000000000000000000000000000000000602082015290565b6100a461026c565b6100a461029f565b6100a46102a7565b60005b8381106102ca5750506000910152565b81810151838201526020016102ba565b6102fb6103046020936101aa936102ef815190565b80835293849260200190565b958691016102b7565b601f01601f191690565b60208082526100a4929101906102da565b346100725761032f366004610067565b61009461033a6102af565b6040519182918261030e565b90602082820312610072576100a491610116565b346100725761008f61036d366004610346565b61049b565b61037a6103b2565b6100a7610398565b6100986100a46100a49290565b6100a490610382565b6100a76103a5600061038f565b610514565b6100a7610372565b60005433906001600160a01b03168190036103ca5750565b610414906103d760405190565b9182917f118cdaa7000000000000000000000000000000000000000000000000000000008352600483016001600160a01b03909116815260200190565b0390fd5b6100a7906104246103b2565b61042e600061038f565b6001600160a01b0381166001600160a01b0383161461045157506100a790610514565b6104149061045e60405190565b9182917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352600483016001600160a01b03909116815260200190565b6100a790610418565b6100986100a46100a4926001600160a01b031690565b6100a4906104a4565b6100a4906104ba565b906104dc6100a4610510926104c3565b82547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03919091161790565b9055565b6000546001600160a01b03169061052c8160006104cc565b61055f6105597f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936104c3565b916104c3565b9161056960405190565b600090a3565b906100a7929161057d6103b2565b6105b1565b6001600160a01b0390911681526100a491604082019160208184039101526102da565b6040513d6000823e3d90fd5b6105ba906104c3565b349190634f1ef286813b15610072576000936105e9916105f46105dc60405190565b9788968795869460e01b90565b845260048401610582565b03925af1801561061d576106055750565b6100a79060006106158183610152565b810190610067565b6105a5565b906100a7929161056f56fea26469706673582212205d5f75a536a5fd2f2e441550c1d5a4e715b6cff79e1cc29a86c7abd4b441f65364736f6c6343000814003360806040523461001a57604051610f456100208239610f4590f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806301ffc9a7146100d2578063248a9ca3146100cd5780632f2ff15d146100c857806336568abe146100c3578063485cc955146100be5780634a44e6c1146100b9578063508a50f4146100b45780635f03a661146100af57806391d14854146100aa578063a217fddf146100a5578063d547741f146100a05763ee546fd803610102576103dd565b6103b0565b610395565b61035a565b610321565b6102e8565b6102c4565b610251565b61021e565b610200565b610189565b610131565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b0361010257565b600080fd5b90503590610114826100d7565b565b906020828203126101025761012a91610107565b90565b9052565b346101025761015e61014c610147366004610116565b6103f5565b60405191829182901515815260200190565b0390f35b806100fb565b9050359061011482610162565b906020828203126101025761012a91610168565b346101025761015e6101a461019f366004610175565b610518565b6040515b9182918290815260200190565b6001600160a01b031690565b6001600160a01b0381166100fb565b90503590610114826101c1565b91906040838203126101025761012a906101f78185610168565b936020016101d0565b34610102576102196102133660046101dd565b9061055a565b604051005b34610102576102196102313660046101dd565b9061060a565b91906040838203126101025761012a906101f781856101d0565b3461010257610219610264366004610237565b906109fb565b909182601f830112156101025781359167ffffffffffffffff831161010257602001926020830284011161010257565b9060208282031261010257813567ffffffffffffffff8111610102576102c0920161026a565b9091565b34610102576102196102d736600461029a565b90610f05565b600091031261010257565b34610102576102f83660046102dd565b61015e7ff16bb8781ef1311f8fe06747bcbe481e695502acdcb0cb8c03aa03899e39a5986101a4565b34610102576103313660046102dd565b61015e7f33dd54660937884a707404066945db647918933f71cc471efc6d6d0c3665d8db6101a4565b346101025761015e61014c6103703660046101dd565b906104e8565b61012a61012a61012a9290565b61012a6000610376565b61012a610383565b34610102576103a53660046102dd565b61015e6101a461038d565b34610102576102196103c33660046101dd565b90610600565b906020828203126101025761012a916101d0565b34610102576102196103f03660046103c9565b610ac4565b7f7965db0b000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821614908115610445575090565b61012a91507fffffffff00000000000000000000000000000000000000000000000000000000167f01ffc9a7000000000000000000000000000000000000000000000000000000001490565b905b600052602052604060002090565b6101b561012a61012a926001600160a01b031690565b61012a906104a1565b61012a906104b7565b90610493906104c0565b61012a905b60ff1690565b61012a90546104d3565b61012a91610502916104fc60009182610491565b016104c9565b6104de565b61012a9081565b61012a9054610507565b600161053161012a92610529600090565b506000610491565b0161050e565b906101149161054d61054882610518565b610564565b9061055791610681565b50565b9061011491610537565b61011490339061058c565b6001600160a01b0390911681526040810192916101149160200152565b9061059e61059a82846104e8565b1590565b6105a6575050565b6105e16105b260405190565b9283927fe2517d3f0000000000000000000000000000000000000000000000000000000084526004840161056f565b0390fd5b90610114916105f661054882610518565b90610557916106fd565b90610114916105e5565b90610614336101b5565b6001600160a01b0382160361062c57610557916106fd565b6040517f6697b232000000000000000000000000000000000000000000000000000000008152600490fd5b9060ff905b9181191691161790565b9061067661012a61067d92151590565b8254610657565b9055565b61068e61059a83836104e8565b156106f6576001916106af836106aa8360006104fc8782610491565b610666565b33906106e56106df6106df7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b926104c0565b926106ef60405190565b600090a490565b5050600090565b9061070881836104e8565b156106f65761072160006106aa83826104fc8782610491565b33906107516106df6106df7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b9261075b60405190565b600090a4600190565b61012a9060401c6104d8565b61012a9054610764565b61012a905b67ffffffffffffffff1690565b61012a905461077a565b61077f61012a61012a9290565b9067ffffffffffffffff9061065c565b61077f61012a61012a9267ffffffffffffffff1690565b906107da61012a61067d926107b3565b82546107a3565b9068ff00000000000000009060401b61065c565b9061080561012a61067d92151590565b82546107e1565b61012d90610796565b602081019291610114919061080c565b907ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00908161085e61085861059a83610770565b9161078c565b9360009261086b84610796565b67ffffffffffffffff8716148061098d575b60019661089a61088c89610796565b9167ffffffffffffffff1690565b149081610965575b155b908161095c575b50610931576108d491836108cb866108c28a610796565b980197886107ca565b61092257610994565b6108dd57505050565b6108e6916107f5565b61091d7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29161091460405190565b91829182610815565b0390a1565b61092c87876107f5565b610994565b6040517ff92ee8a9000000000000000000000000000000000000000000000000000000008152600490fd5b159050386108ab565b90506108a4610973306104c0565b3b61098461098088610376565b9190565b149190506108a2565b508261087d565b906109d4610557926109ad816109a8610383565b610681565b507ff16bb8781ef1311f8fe06747bcbe481e695502acdcb0cb8c03aa03899e39a598610681565b507f33dd54660937884a707404066945db647918933f71cc471efc6d6d0c3665d8db610681565b9061011491610825565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8054821015610a5457610a4b600191600052602060002090565b91020190600090565b610a1b565b9190600861065c910291610a736001600160a01b03841b90565b921b90565b9190610a8961012a61067d936104c0565b908354610a59565b9081549168010000000000000000831015610abf5782610ab991600161011495018155610a31565b90610a78565b610a05565b61011490610ad36001916104c0565b90610a91565b6101149190610b077f33dd54660937884a707404066945db647918933f71cc471efc6d6d0c3665d8db610564565b610d96565b0190565b634e487b7160e01b600052601160045260246000fd5b6000198114610b355760010190565b610b10565b61012a916008021c6101b5565b9061012a9154610b3a565b90601f01601f1916810190811067ffffffffffffffff821117610abf57604052565b60ff81166100fb565b9050359061011482610b74565b5061012a906020810190610b7d565b5061012a906020810190610168565b5061012a9060208101906101d0565b9035601e19368390030181121561010257016020813591019167ffffffffffffffff82116101025736829003831361010257565b90826000939282370152565b9190610c1581610c0e81610b0c9560209181520190565b8095610beb565b601f01601f191690565b9061012a9060e0610ce6610cdc6101008401610c45610c3e8880610b8a565b60ff168652565b610c5c610c556020890189610b99565b6020870152565b610c73610c6c6040890189610b99565b6040870152565b610c8a610c836060890189610b99565b6060870152565b610caa610c9a6080890189610ba8565b6001600160a01b03166080870152565b610cc1610cba60a0890189610b99565b60a0870152565b610cce60c0880188610bb7565b9086830360c0880152610bf7565b9482810190610ba8565b6001600160a01b0316910152565b9061012a91610c1f565b903560fe193683900301811215610102570190565b818352916020019081610d296020830284019490565b92836000925b848410610d3f5750505050505090565b9091929394956020610d6b610d648385600195038852610d5f8b88610cfe565b610cf4565b9860200190565b940194019294939190610d2f565b602080825261012a93910191610d13565b6040513d6000823e3d90fd5b90919060009083610da683610376565b8114610ea657610dda7f3357352afe45ddda257f56623a512152c527b6f11555ec2fb2fdbbe72ddece41916101a860405190565b0390a1610de682610376565b6001610df361012a825490565b821015610e9e57610e10610e0a83610e1593610a31565b90610b47565b6104c0565b9063d90d786e91803b1561010257610e3b928591610e3260405190565b94859260e01b90565b8252818381610e4e8c8a60048401610d79565b03925af1918215610e9957610e6892610e6d575b50610b26565b610de6565b610e8c90853d8711610e92575b610e848183610b52565b8101906102dd565b38610e62565b503d610e7a565b610d8a565b505050509050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4e6f207472616e73616374696f6e7320746f20636f6e766572740000000000006044820152606490fd5b9061011491610ad956fea2646970667358221220b67ba19c18a233d92d36e36ee5b48a1bbfdebb7ee33eda44400e9229076b658d64736f6c63430008140033",
}

// SystemDeployerABI is the input ABI used to generate the binding from.
// Deprecated: Use SystemDeployerMetaData.ABI instead.
var SystemDeployerABI = SystemDeployerMetaData.ABI

// SystemDeployerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SystemDeployerMetaData.Bin instead.
var SystemDeployerBin = SystemDeployerMetaData.Bin

// DeploySystemDeployer deploys a new Ethereum contract, binding an instance of SystemDeployer to it.
func DeploySystemDeployer(auth *bind.TransactOpts, backend bind.ContractBackend, eoaAdmin common.Address) (common.Address, *types.Transaction, *SystemDeployer, error) {
	parsed, err := SystemDeployerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SystemDeployerBin), backend, eoaAdmin)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SystemDeployer{SystemDeployerCaller: SystemDeployerCaller{contract: contract}, SystemDeployerTransactor: SystemDeployerTransactor{contract: contract}, SystemDeployerFilterer: SystemDeployerFilterer{contract: contract}}, nil
}

// SystemDeployer is an auto generated Go binding around an Ethereum contract.
type SystemDeployer struct {
	SystemDeployerCaller     // Read-only binding to the contract
	SystemDeployerTransactor // Write-only binding to the contract
	SystemDeployerFilterer   // Log filterer for contract events
}

// SystemDeployerCaller is an auto generated read-only Go binding around an Ethereum contract.
type SystemDeployerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SystemDeployerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SystemDeployerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SystemDeployerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SystemDeployerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SystemDeployerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SystemDeployerSession struct {
	Contract     *SystemDeployer   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SystemDeployerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SystemDeployerCallerSession struct {
	Contract *SystemDeployerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// SystemDeployerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SystemDeployerTransactorSession struct {
	Contract     *SystemDeployerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// SystemDeployerRaw is an auto generated low-level Go binding around an Ethereum contract.
type SystemDeployerRaw struct {
	Contract *SystemDeployer // Generic contract binding to access the raw methods on
}

// SystemDeployerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SystemDeployerCallerRaw struct {
	Contract *SystemDeployerCaller // Generic read-only contract binding to access the raw methods on
}

// SystemDeployerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SystemDeployerTransactorRaw struct {
	Contract *SystemDeployerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSystemDeployer creates a new instance of SystemDeployer, bound to a specific deployed contract.
func NewSystemDeployer(address common.Address, backend bind.ContractBackend) (*SystemDeployer, error) {
	contract, err := bindSystemDeployer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SystemDeployer{SystemDeployerCaller: SystemDeployerCaller{contract: contract}, SystemDeployerTransactor: SystemDeployerTransactor{contract: contract}, SystemDeployerFilterer: SystemDeployerFilterer{contract: contract}}, nil
}

// NewSystemDeployerCaller creates a new read-only instance of SystemDeployer, bound to a specific deployed contract.
func NewSystemDeployerCaller(address common.Address, caller bind.ContractCaller) (*SystemDeployerCaller, error) {
	contract, err := bindSystemDeployer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SystemDeployerCaller{contract: contract}, nil
}

// NewSystemDeployerTransactor creates a new write-only instance of SystemDeployer, bound to a specific deployed contract.
func NewSystemDeployerTransactor(address common.Address, transactor bind.ContractTransactor) (*SystemDeployerTransactor, error) {
	contract, err := bindSystemDeployer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SystemDeployerTransactor{contract: contract}, nil
}

// NewSystemDeployerFilterer creates a new log filterer instance of SystemDeployer, bound to a specific deployed contract.
func NewSystemDeployerFilterer(address common.Address, filterer bind.ContractFilterer) (*SystemDeployerFilterer, error) {
	contract, err := bindSystemDeployer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SystemDeployerFilterer{contract: contract}, nil
}

// bindSystemDeployer binds a generic wrapper to an already deployed contract.
func bindSystemDeployer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SystemDeployerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SystemDeployer *SystemDeployerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SystemDeployer.Contract.SystemDeployerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SystemDeployer *SystemDeployerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SystemDeployer.Contract.SystemDeployerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SystemDeployer *SystemDeployerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SystemDeployer.Contract.SystemDeployerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SystemDeployer *SystemDeployerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SystemDeployer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SystemDeployer *SystemDeployerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SystemDeployer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SystemDeployer *SystemDeployerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SystemDeployer.Contract.contract.Transact(opts, method, params...)
}

// SystemDeployerSystemContractDeployedIterator is returned from FilterSystemContractDeployed and is used to iterate over the raw logs and unpacked data for SystemContractDeployed events raised by the SystemDeployer contract.
type SystemDeployerSystemContractDeployedIterator struct {
	Event *SystemDeployerSystemContractDeployed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SystemDeployerSystemContractDeployedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SystemDeployerSystemContractDeployed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SystemDeployerSystemContractDeployed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SystemDeployerSystemContractDeployedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SystemDeployerSystemContractDeployedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SystemDeployerSystemContractDeployed represents a SystemContractDeployed event raised by the SystemDeployer contract.
type SystemDeployerSystemContractDeployed struct {
	Name            string
	ContractAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSystemContractDeployed is a free log retrieval operation binding the contract event 0xbd64e14789a915ea657e42f2dbf0b973227708fa64b58766287637985d1ade69.
//
// Solidity: event SystemContractDeployed(string name, address contractAddress)
func (_SystemDeployer *SystemDeployerFilterer) FilterSystemContractDeployed(opts *bind.FilterOpts) (*SystemDeployerSystemContractDeployedIterator, error) {

	logs, sub, err := _SystemDeployer.contract.FilterLogs(opts, "SystemContractDeployed")
	if err != nil {
		return nil, err
	}
	return &SystemDeployerSystemContractDeployedIterator{contract: _SystemDeployer.contract, event: "SystemContractDeployed", logs: logs, sub: sub}, nil
}

// WatchSystemContractDeployed is a free log subscription operation binding the contract event 0xbd64e14789a915ea657e42f2dbf0b973227708fa64b58766287637985d1ade69.
//
// Solidity: event SystemContractDeployed(string name, address contractAddress)
func (_SystemDeployer *SystemDeployerFilterer) WatchSystemContractDeployed(opts *bind.WatchOpts, sink chan<- *SystemDeployerSystemContractDeployed) (event.Subscription, error) {

	logs, sub, err := _SystemDeployer.contract.WatchLogs(opts, "SystemContractDeployed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SystemDeployerSystemContractDeployed)
				if err := _SystemDeployer.contract.UnpackLog(event, "SystemContractDeployed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSystemContractDeployed is a log parse operation binding the contract event 0xbd64e14789a915ea657e42f2dbf0b973227708fa64b58766287637985d1ade69.
//
// Solidity: event SystemContractDeployed(string name, address contractAddress)
func (_SystemDeployer *SystemDeployerFilterer) ParseSystemContractDeployed(log types.Log) (*SystemDeployerSystemContractDeployed, error) {
	event := new(SystemDeployerSystemContractDeployed)
	if err := _SystemDeployer.contract.UnpackLog(event, "SystemContractDeployed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
