// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package SystemDeployer

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SystemDeployerMetaData contains all meta data concerning the SystemDeployer contract.
var SystemDeployerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eoaAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"SystemContractDeployed\",\"type\":\"event\"}]",
	Bin: "0x6080604052346200002e576200001e62000018620000d1565b620000f4565b604051603f620003818239603f90f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200006b57604052565b62000033565b90620000886200008060405190565b928362000049565b565b6001600160a01b031690565b90565b6001600160a01b038116036200002e57565b90505190620000888262000099565b906020828203126200002e576200009691620000ab565b620000966200312280380380620000e88162000071565b928339810190620000ba565b620000889062000164565b6040513d6000823e3d90fd5b62000096906200008a906001600160a01b031682565b62000096906200010b565b620000969062000121565b620001536200014d620000969263ffffffff1690565b60e01b90565b6001600160e01b03191690565b0190565b60405161183281016001600160401b038111828210176200006b57620001918291611832620018f0843990565b03906000f080156200028d576200020d916200020760049262000201620001bc63485cc95562000137565b620001f13386620001cc60405190565b98899460208601908152016001600160a01b0391821681529116602082015260400190565b6020820181038252038562000049565b6200012c565b62000335565b620002887fbd64e14789a915ea657e42f2dbf0b973227708fa64b58766287637985d1ade69916200023d60405190565b9182918260408082526014908201527f5472616e73616374696f6e73416e616c797a657200000000000000000000000060608201526001600160a01b03909116602082015260800190565b0390a1565b620000ff565b60005b838110620002a75750506000910152565b818101518382015260200162000296565b620002dd620002e76020936200016093620002d1815190565b80835293849260200190565b9586910162000293565b601f01601f191690565b620003276200009694929362000317606084019560008501906001600160a01b03169052565b6001600160a01b03166020830152565b6040818403910152620002b8565b90604051926115308401916001600160401b038311858410176200006b5784936200036993611530620003c08739620002f1565b03906000f080156200028d5762000096906200012c56fe6080604052600080fdfea2646970667358221220d59d030c58851607d5c752c5e8c020b706a96fc11fd5aeb21045e3f6f821a88c64736f6c6343000814003360a060405262000019620000126200019f565b91620001ff565b6040516105e762000681823960805181603001526105e790f35b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200006b57604052565b62000033565b90620000886200008060405190565b928362000049565b565b6001600160a01b031690565b90565b6001600160a01b03811603620000ab57565b600080fd5b90505190620000888262000099565b6001600160401b0381116200006b57602090601f01601f19160190565b60005b838110620000f05750506000910152565b8181015183820152602001620000df565b909291926200011a6200011482620000bf565b62000071565b93818552602085019082840111620000ab576200008892620000dc565b9080601f83011215620000ab578151620000969260200162000101565b91606083830312620000ab576200016c8284620000b0565b926200017c8360208301620000b0565b60408201519093906001600160401b038111620000ab5762000096920162000137565b620001c26200153080380380620001b68162000071565b92833981019062000154565b909192565b6040513d6000823e3d90fd5b62000096906200008a906001600160a01b031682565b6200009690620001d3565b6200009690620001e9565b916200020c919262000288565b604051906108c882016001600160401b038111838210176200006b5782916200024b916108c862000c6885396001600160a01b03909116815260200190565b03906000f0801562000282576200026290620001f4565b608052620000886200027c6080516001600160a01b031690565b62000406565b620001c7565b906200008891620002a4565b6200009662000096620000969290565b90620002b08262000381565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b620002dc83620001f4565b90620002e760405190565b600090a2805162000301620002fd600062000294565b9190565b111562000316576200031391620005a5565b50565b50506200008862000543565b620000967f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc62000294565b9062000361620000966200037d92620001f4565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b6000813b62000394620002fd8362000294565b14620003b557906200008891620003ae6200009662000322565b016200034d565b620003e882620003c460405190565b634c9c8ce360e01b8152918291600483016001600160a01b03909116815260200190565b0390fd5b6001600160a01b0391821681529116602082015260400190565b6200008890620004156200049b565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91620004506200044660405190565b92839283620003ec565b0390a1620004d1565b620000967fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610362000294565b62000096906200008a565b62000096905462000484565b620000966000620004af6200009662000459565b016200048f565b6200008a62000096620000969290565b6200009690620004b6565b90600091620004e083620004c6565b926001600160a01b0384166001600160a01b03831614620005105762000088929350620003ae6200009662000459565b620003e8846200051f60405190565b633173bdd160e11b8152918291600483016001600160a01b03909116815260200190565b3462000554620002fd600062000294565b116200055c57565b60405163b398979f60e01b8152600490fd5b906200057e6200011483620000bf565b918252565b3d15620005a057620005953d6200056e565b903d6000602084013e565b606090565b6000806200009693620005b6606090565b50805190602001845af4620005ca62000583565b9190620005d857506200064d565b8151600090620005ec620002fd8362000294565b14908162000632575b50620005ff575090565b620003e8906200060e60405190565b639996b31560e01b8152918291600483016001600160a01b03909116815260200190565b905062000645620002fd833b9262000294565b1438620005f5565b80516200065f620002fd600062000294565b11156200066e57805190602001fd5b604051630a12f52160e11b8152600490fdfe608060405261000c61000e565b005b610016610027565b565b6001600160a01b031690565b90565b336100616100547f0000000000000000000000000000000000000000000000000000000000000000610018565b916001600160a01b031690565b036100e8577f4f1ef286000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000060003516146100e0576040517fd2b576ec000000000000000000000000000000000000000000000000000000008152600490fd5b0390fd5b6100166102ed565b6100f06100f5565b610156565b610024610140565b6100246100246100249290565b6100247f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6100fd565b546001600160a01b031690565b610024600061015061002461010a565b01610133565b60008091368280378136915af43d6000803e15610172573d6000f35b3d6000fd5b9093929384831161018f57841161018f578101920390565b600080fd5b6001600160a01b0381160361018f57565b9050359061001682610194565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761020357604052565b6101b2565b9061001661021560405190565b92836101e1565b67ffffffffffffffff811161020357602090601f01601f19160190565b90826000939282370152565b9092919261025a6102558261021c565b610208565b9381855260208501908284011161018f5761001692610239565b9080601f8301121561018f5781602061002493359101610245565b91909160408184031261018f576102a683826101a5565b92602082013567ffffffffffffffff811161018f576100249201610274565b610018610024610024926001600160a01b031690565b610024906102c5565b610024906102db565b61001661032361031c6103146103103660008161030a60046100fd565b91610177565b9091565b81019061028f565b91906102e4565b9061032d826103ef565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b610357836102e4565b9061036160405190565b600090a2805161037861037460006100fd565b9190565b111561038a57610387916104c7565b50565b5050610016610456565b6001600160a01b03909116815260200190565b906103b76100246103eb926102e4565b82547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03919091161790565b9055565b6000813b6103ff610374836100fd565b1461041a57906100169161041461002461010a565b016103a7565b6100dc8261042760405190565b9182917f4c9c8ce300000000000000000000000000000000000000000000000000000000835260048301610394565b3461046461037460006100fd565b1161046b57565b6040517fb398979f000000000000000000000000000000000000000000000000000000008152600490fd5b906104a36102558361021c565b918252565b3d156104c2576104b73d610496565b903d6000602084013e565b606090565b600080610024936104d6606090565b50805190602001845af46104e86104a8565b91906104f45750610569565b8151600090610505610374836100fd565b149081610552575b50610516575090565b6100dc9061052360405190565b9182917f9996b31500000000000000000000000000000000000000000000000000000000835260048301610394565b9050610562610374833b926100fd565b143861050d565b805161057861037460006100fd565b111561058657805190602001fd5b6040517f1425ea42000000000000000000000000000000000000000000000000000000008152600490fdfea2646970667358221220782f2801dba6b92d163f770087c095f4a3bcf48f3a41dbeafc28edfa481d940f64736f6c6343000814003360806040523462000030576200001e62000018620000d3565b620000f6565b60405161066362000265823961066390f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200006d57604052565b62000035565b906200008a6200008260405190565b92836200004b565b565b6001600160a01b031690565b90565b6001600160a01b038116036200003057565b905051906200008a826200009b565b9060208282031262000030576200009891620000ad565b62000098620008c880380380620000ea8162000073565b928339810190620000bc565b6200008a906200012f565b6200008c62000098620000989290565b620000989062000101565b6001600160a01b03909116815260200190565b6200013b600062000111565b6001600160a01b0381166001600160a01b038316146200016157506200008a9062000202565b62000187906200017060405190565b631e4fbdf760e01b8152918291600483016200011c565b0390fd5b62000098906200008c565b6200009890546200018b565b62000098906200008c906001600160a01b031682565b6200009890620001a2565b6200009890620001b8565b90620001e262000098620001fe92620001c3565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b6200020e600062000196565b906200021c816000620001ce565b620002536200024c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093620001c3565b91620001c3565b916200025e60405190565b600090a356fe6080604052600436101561001257600080fd5b60003560e01c8063715018a6146100625780638da5cb5b1461005d5780639623609d14610058578063ad3cb1cc146100535763f2fde38b036100725761035a565b61031f565b610246565b6100a9565b610077565b600091031261007257565b600080fd5b3461007257610087366004610067565b61008f6103aa565b604051005b0390f35b6001600160a01b031690565b90565b565b34610072576100b9366004610067565b6100946100ce6000546001600160a01b031690565b604051918291826001600160a01b03909116815260200190565b6001600160a01b0381165b0361007257565b905035906100a7826100e8565b6001600160a01b0381166100f3565b905035906100a782610107565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761017457604052565b610123565b906100a761018660405190565b9283610152565b67ffffffffffffffff811161017457602090601f01601f19160190565b0190565b90826000939282370152565b909291926101cf6101ca8261018d565b610179565b93818552602085019082840111610072576100a7926101ae565b9080601f83011215610072578160206100a4933591016101ba565b916060838303126100725761021982846100fa565b926102278360208301610116565b92604082013567ffffffffffffffff8111610072576100a492016101e9565b61008f610254366004610204565b91610622565b906102676101ca8361018d565b918252565b610276600561025a565b7f352e302e30000000000000000000000000000000000000000000000000000000602082015290565b6100a461026c565b6100a461029f565b6100a46102a7565b60005b8381106102ca5750506000910152565b81810151838201526020016102ba565b6102fb6103046020936101aa936102ef815190565b80835293849260200190565b958691016102b7565b601f01601f191690565b60208082526100a4929101906102da565b346100725761032f366004610067565b61009461033a6102af565b6040519182918261030e565b90602082820312610072576100a491610116565b346100725761008f61036d366004610346565b61049b565b61037a6103b2565b6100a7610398565b6100986100a46100a49290565b6100a490610382565b6100a76103a5600061038f565b610514565b6100a7610372565b60005433906001600160a01b03168190036103ca5750565b610414906103d760405190565b9182917f118cdaa7000000000000000000000000000000000000000000000000000000008352600483016001600160a01b03909116815260200190565b0390fd5b6100a7906104246103b2565b61042e600061038f565b6001600160a01b0381166001600160a01b0383161461045157506100a790610514565b6104149061045e60405190565b9182917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352600483016001600160a01b03909116815260200190565b6100a790610418565b6100986100a46100a4926001600160a01b031690565b6100a4906104a4565b6100a4906104ba565b906104dc6100a4610510926104c3565b82547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03919091161790565b9055565b6000546001600160a01b03169061052c8160006104cc565b61055f6105597f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936104c3565b916104c3565b9161056960405190565b600090a3565b906100a7929161057d6103b2565b6105b1565b6001600160a01b0390911681526100a491604082019160208184039101526102da565b6040513d6000823e3d90fd5b6105ba906104c3565b349190634f1ef286813b15610072576000936105e9916105f46105dc60405190565b9788968795869460e01b90565b845260048401610582565b03925af1801561061d576106055750565b6100a79060006106158183610152565b810190610067565b6105a5565b906100a7929161056f56fea26469706673582212205d5f75a536a5fd2f2e441550c1d5a4e715b6cff79e1cc29a86c7abd4b441f65364736f6c6343000814003360806040523461001a57604051611812610020823961181290f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806301ffc9a7146100d2578063248a9ca3146100cd5780632f2ff15d146100c857806336568abe146100c3578063485cc955146100be578063508a50f4146100b95780635f03a661146100b457806391d14854146100af5780639dbbcf8e146100aa578063a217fddf146100a5578063d547741f146100a05763ee546fd803610102576103b5565b610388565b61036d565b610336565b6102e6565b6102ad565b610274565b610250565b61021d565b6101ff565b610189565b610131565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b0361010257565b600080fd5b90503590610114826100d7565b565b906020828203126101025761012a91610107565b90565b9052565b346101025761015e61014c610147366004610116565b6103cd565b60405191829182901515815260200190565b0390f35b806100fb565b9050359061011482610162565b906020828203126101025761012a91610168565b346101025761015e6101a461019f366004610175565b6104f0565b6040519182918290815260200190565b6001600160a01b031690565b6001600160a01b0381166100fb565b90503590610114826101c0565b91906040838203126101025761012a906101f68185610168565b936020016101cf565b34610102576102186102123660046101dc565b90610532565b604051005b34610102576102186102303660046101dc565b906105e2565b91906040838203126101025761012a906101f681856101cf565b3461010257610218610263366004610236565b906109d3565b600091031261010257565b3461010257610284366004610269565b61015e7ff16bb8781ef1311f8fe06747bcbe481e695502acdcb0cb8c03aa03899e39a5986101a4565b34610102576102bd366004610269565b61015e7f33dd54660937884a707404066945db647918933f71cc471efc6d6d0c3665d8db6101a4565b346101025761015e61014c6102fc3660046101dc565b906104c0565b908160209103126101025790565b9060208282031261010257813567ffffffffffffffff81116101025761012a9201610302565b3461010257610218610349366004610310565b6110ca565b61012a61012a61012a9290565b61012a600061034e565b61012a61035b565b346101025761037d366004610269565b61015e6101a4610365565b346101025761021861039b3660046101dc565b906105d8565b906020828203126101025761012a916101cf565b34610102576102186103c83660046103a1565b610ae3565b7f7965db0b000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000082161490811561041d575090565b61012a91507fffffffff00000000000000000000000000000000000000000000000000000000167f01ffc9a7000000000000000000000000000000000000000000000000000000001490565b905b600052602052604060002090565b6101b461012a61012a926001600160a01b031690565b61012a90610479565b61012a9061048f565b9061046b90610498565b61012a905b60ff1690565b61012a90546104ab565b61012a916104da916104d460009182610469565b016104a1565b6104b6565b61012a9081565b61012a90546104df565b600161050961012a92610501600090565b506000610469565b016104e6565b9061011491610525610520826104f0565b61053c565b9061052f91610659565b50565b906101149161050f565b610114903390610564565b6001600160a01b0390911681526040810192916101149160200152565b9061057661057282846104c0565b1590565b61057e575050565b6105b961058a60405190565b9283927fe2517d3f00000000000000000000000000000000000000000000000000000000845260048401610547565b0390fd5b90610114916105ce610520826104f0565b9061052f916106d5565b90610114916105bd565b906105ec336101b4565b6001600160a01b038216036106045761052f916106d5565b6040517f6697b232000000000000000000000000000000000000000000000000000000008152600490fd5b9060ff905b9181191691161790565b9061064e61012a61065592151590565b825461062f565b9055565b61066661057283836104c0565b156106ce57600191610687836106828360006104d48782610469565b61063e565b33906106bd6106b76106b77f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9590565b92610498565b926106c760405190565b600090a490565b5050600090565b906106e081836104c0565b156106ce576106f9600061068283826104d48782610469565b33906107296106b76106b77ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9590565b9261073360405190565b600090a4600190565b61012a9060401c6104b0565b61012a905461073c565b61012a905b67ffffffffffffffff1690565b61012a9054610752565b61075761012a61012a9290565b9067ffffffffffffffff90610634565b61075761012a61012a9267ffffffffffffffff1690565b906107b261012a6106559261078b565b825461077b565b9068ff00000000000000009060401b610634565b906107dd61012a61065592151590565b82546107b9565b61012d9061076e565b60208101929161011491906107e4565b907ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00908161083661083061057283610748565b91610764565b936000926108438461076e565b67ffffffffffffffff87161480610965575b6001966108726108648961076e565b9167ffffffffffffffff1690565b14908161093d575b155b9081610934575b50610909576108ac91836108a38661089a8a61076e565b980197886107a2565b6108fa5761096c565b6108b557505050565b6108be916107cd565b6108f57fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916108ec60405190565b918291826107ed565b0390a1565b61090487876107cd565b61096c565b6040517ff92ee8a9000000000000000000000000000000000000000000000000000000008152600490fd5b15905038610883565b905061087c61094b30610498565b3b61095c6109588861034e565b9190565b1491905061087a565b5082610855565b906109ac61052f926109858161098061035b565b610659565b507ff16bb8781ef1311f8fe06747bcbe481e695502acdcb0cb8c03aa03899e39a598610659565b507f33dd54660937884a707404066945db647918933f71cc471efc6d6d0c3665d8db610659565b90610114916107fd565b61011490610a0a7ff16bb8781ef1311f8fe06747bcbe481e695502acdcb0cb8c03aa03899e39a59861053c565b610ace565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8054821015610a5e57610a55600191600052602060002090565b91020190600090565b610a25565b91906008610634910291610a7d6001600160a01b03841b90565b921b90565b9190610a9361012a61065593610498565b908354610a63565b9081549168010000000000000000831015610ac95782610ac391600161011495018155610a3b565b90610a82565b610a0f565b61011490610add600191610498565b90610a9b565b610114906109dd565b61011490610b197f33dd54660937884a707404066945db647918933f71cc471efc6d6d0c3665d8db61053c565b610f59565b903590601e193682900301821215610102570180359067ffffffffffffffff82116101025760200191602082023603831361010257565b90601f01601f1916810190811067ffffffffffffffff821117610ac957604052565b90610114610b8460405190565b9283610b55565b67ffffffffffffffff8111610ac95760208091020190565b90610bb5610bb083610b8b565b610b77565b918252565b61012a6101c0610b77565b60209081808080808080808080808080610bdd610bba565b9e8f60008152016000815201600081520160008152016000815201600081520160008152016060815201600081520160008152016000815201600081520160008152016060905250565b61012a610bc5565b60005b828110610c3e57505050565b602090610c49610c27565b8184015201610c32565b90610114610c69610c6384610ba3565b93610b8b565b601f190160208401610c2f565b634e487b7160e01b600052601160045260246000fd5b6000198114610c9b5760010190565b610c76565b903590601e193682900301821215610102570180359067ffffffffffffffff8211610102576020019136829003831361010257565b90821015610a5e576020610cec9202810190610ca0565b9091565b90610cf9825190565b811015610a5e576020809102010190565b61012a916008021c6101b4565b9061012a9154610d0a565b60005b838110610d355750506000910152565b8181015183820152602001610d25565b610d66610d6f602093610d7993610d5a815190565b80835293849260200190565b95869101610d22565b601f01601f191690565b0190565b90610d9d610d96610d8c845190565b8084529260200190565b9260200190565b9060005b818110610dae5750505090565b909192610dd4610dcd60019286516001600160a01b0316815260200190565b9460200190565b929101610da1565b805160ff16825261012a916101a0610e626101c08301610e0160208601516020860152565b610e1060408601516040860152565b610e1f60608601516060860152565b610e2e60808601516080860152565b60a0858101516001600160a01b031690850152610e5060c086015160c0860152565b60e085015184820360e0860152610d45565b6101008085015160ff169084015292610e82610120820151610120850152565b610e93610140820151610140850152565b610ea4610160820151610160850152565b610eb5610180820151610180850152565b0151906101a0818403910152610d7d565b9061012a91610ddc565b90610ee6610edc835190565b8083529160200190565b9081610ef86020830284019460200190565b926000915b838310610f0c57505050505090565b90919293946020610f2f610f2883856001950387528951610ec6565b9760200190565b9301930191939290610efd565b602080825261012a92910190610ed0565b6040513d6000823e3d90fd5b610f6b610f668280610b1e565b905090565b90600091610f7b6109588461034e565b146110c65781810190610f99610f94610f668484610b1e565b610c53565b93610fa38461034e565b610fb361012a610f668686610b1e565b811015610ffb5780610fdb610fd5610ff693610fcf8888610b1e565b90610cd5565b90611155565b610fe58289610cf0565b52610ff08188610cf0565b50610c8c565b610fa3565b50929150506110098161034e565b600161101661012a825490565b8210156110bf5761103361102d8361103893610a3b565b90610d17565b610498565b9063630ac52c91803b156101025761105e92849161105560405190565b94859260e01b90565b82528183816110708b60048301610f3c565b03925af19182156110ba576110899261108e5750610c8c565b611009565b6110ad90843d86116110b3575b6110a58183610b55565b810190610269565b38610ff0565b503d61109b565b610f4d565b5050509050565b5050565b61011490610aec565b156110da57565b60405162461bcd60e51b815260206004820152601660248201527f456d707479207472616e73616374696f6e2064617461000000000000000000006044820152606490fd5b9190811015610a5e570190565b6104b061012a61012a9260ff1690565b61012a9060f81c61112c565b6104b061012a61012a9290565b9061115e610c27565b506000611177826111716109588461034e565b116110d3565b6111c46111be6111b961119361118c8561034e565b868861111f565b357fff000000000000000000000000000000000000000000000000000000000000001690565b61113c565b91611148565b60ff8216036111d7575061012a91611378565b6111e16001611148565b60ff8216036111f4575061012a9161156e565b6112086112016002611148565b9160ff1690565b036112165761012a9161171b565b60405162461bcd60e51b815260206004820152601c60248201527f556e737570706f72746564207472616e73616374696f6e2074797065000000006044820152606490fd5b67ffffffffffffffff8111610ac957602090601f01601f19160190565b90826000939282370152565b90929192611294610bb08261125b565b938185526020850190828401116101025761011492611278565b9080601f830112156101025781602061012a93359101611284565b60ff81166100fb565b90503590610114826112c9565b909161012082840312610102576112f68383610168565b926113048160208501610168565b926113128260408301610168565b9261132083606084016101cf565b9261132e8160808501610168565b9260a081013567ffffffffffffffff8111610102578261134f9183016112ae565b9261012a6113608460c085016112d2565b9361136e8160e08601610168565b9361010001610168565b9061141761140861140861103361012a94611391610c27565b506114086113c26113a0610c27565b9889936113ba60006113b181611148565b60ff1690870152565b8101906112df565b94929c95979d939060408b9c93989c019d60608c019b611413608082019a60a083019961140b60c085019660e08601956114086101008201946101406101208401930152565b52565b9060ff169052565b5252565b6001600160a01b03169052565b90939293848311610102578411610102578101920390565b9092919261144c610bb082610b8b565b938185526020808601920283019281841161010257915b8383106114705750505050565b6020809161147e84866101cf565b815201920191611463565b9080601f830112156101025781602061012a9335910161143c565b919061016083820312610102576114bb8184610168565b926114c98260208301610168565b926114d78360408401610168565b926114e58160608501610168565b926114f382608083016101cf565b926115018360a08401610168565b9260c083013567ffffffffffffffff811161010257816115229185016112ae565b9260e081013567ffffffffffffffff81116101025782611543918301611489565b9261012a6115558461010085016112d2565b93611564816101208601610168565b9361014001610168565b611576610c27565b5061157f610c27565b9180600161158c81611148565b60ff16855261159a9061034e565b906115a493611424565b81016115af916114a4565b9160208c9b9a989497929599969b019a60408d01998d6060810199608082019860a083019760c084019660e08501946101a081019361010082019361012083019261014001906115fc9152565b6116039152565b60ff16905252526116119152565b61161a90610498565b6001600160a01b031690525b61162d9152565b6116349152565b61163b9152565b61012a9152565b909161018082840312610102576116598383610168565b926116678160208501610168565b926116758260408301610168565b926116838360608401610168565b926116918160808501610168565b9261169f8260a083016101cf565b926116ad8360c08401610168565b9260e083013567ffffffffffffffff811161010257816116ce9185016112ae565b9261010081013567ffffffffffffffff811161010257826116f0918301611489565b9261012a6117028461012085016112d2565b93611711816101408601610168565b9361016001610168565b90611724610c27565b5061172d610c27565b91829161173a6002611148565b60ff1683528061174a600161034e565b9061175493611424565b810161175f91611642565b6101408d015260208c019b604081019a99610160820199909861018083019891976080840197919660a0850196939560c0860195929460e08401936101a08101926101008201929161012001906117b39152565b60ff16905252526117c19152565b6117ca90610498565b6001600160a01b03169052611626915256fea2646970667358221220b8ff3cf3247a12d054de35f2950617cc72e1a0c6e90f9eebcd928df1a78d874b64736f6c63430008140033",
}

// SystemDeployerABI is the input ABI used to generate the binding from.
// Deprecated: Use SystemDeployerMetaData.ABI instead.
var SystemDeployerABI = SystemDeployerMetaData.ABI

// SystemDeployerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SystemDeployerMetaData.Bin instead.
var SystemDeployerBin = SystemDeployerMetaData.Bin

// DeploySystemDeployer deploys a new Ethereum contract, binding an instance of SystemDeployer to it.
func DeploySystemDeployer(auth *bind.TransactOpts, backend bind.ContractBackend, eoaAdmin common.Address) (common.Address, *types.Transaction, *SystemDeployer, error) {
	parsed, err := SystemDeployerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SystemDeployerBin), backend, eoaAdmin)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SystemDeployer{SystemDeployerCaller: SystemDeployerCaller{contract: contract}, SystemDeployerTransactor: SystemDeployerTransactor{contract: contract}, SystemDeployerFilterer: SystemDeployerFilterer{contract: contract}}, nil
}

// SystemDeployer is an auto generated Go binding around an Ethereum contract.
type SystemDeployer struct {
	SystemDeployerCaller     // Read-only binding to the contract
	SystemDeployerTransactor // Write-only binding to the contract
	SystemDeployerFilterer   // Log filterer for contract events
}

// SystemDeployerCaller is an auto generated read-only Go binding around an Ethereum contract.
type SystemDeployerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SystemDeployerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SystemDeployerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SystemDeployerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SystemDeployerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SystemDeployerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SystemDeployerSession struct {
	Contract     *SystemDeployer   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SystemDeployerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SystemDeployerCallerSession struct {
	Contract *SystemDeployerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// SystemDeployerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SystemDeployerTransactorSession struct {
	Contract     *SystemDeployerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// SystemDeployerRaw is an auto generated low-level Go binding around an Ethereum contract.
type SystemDeployerRaw struct {
	Contract *SystemDeployer // Generic contract binding to access the raw methods on
}

// SystemDeployerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SystemDeployerCallerRaw struct {
	Contract *SystemDeployerCaller // Generic read-only contract binding to access the raw methods on
}

// SystemDeployerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SystemDeployerTransactorRaw struct {
	Contract *SystemDeployerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSystemDeployer creates a new instance of SystemDeployer, bound to a specific deployed contract.
func NewSystemDeployer(address common.Address, backend bind.ContractBackend) (*SystemDeployer, error) {
	contract, err := bindSystemDeployer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SystemDeployer{SystemDeployerCaller: SystemDeployerCaller{contract: contract}, SystemDeployerTransactor: SystemDeployerTransactor{contract: contract}, SystemDeployerFilterer: SystemDeployerFilterer{contract: contract}}, nil
}

// NewSystemDeployerCaller creates a new read-only instance of SystemDeployer, bound to a specific deployed contract.
func NewSystemDeployerCaller(address common.Address, caller bind.ContractCaller) (*SystemDeployerCaller, error) {
	contract, err := bindSystemDeployer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SystemDeployerCaller{contract: contract}, nil
}

// NewSystemDeployerTransactor creates a new write-only instance of SystemDeployer, bound to a specific deployed contract.
func NewSystemDeployerTransactor(address common.Address, transactor bind.ContractTransactor) (*SystemDeployerTransactor, error) {
	contract, err := bindSystemDeployer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SystemDeployerTransactor{contract: contract}, nil
}

// NewSystemDeployerFilterer creates a new log filterer instance of SystemDeployer, bound to a specific deployed contract.
func NewSystemDeployerFilterer(address common.Address, filterer bind.ContractFilterer) (*SystemDeployerFilterer, error) {
	contract, err := bindSystemDeployer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SystemDeployerFilterer{contract: contract}, nil
}

// bindSystemDeployer binds a generic wrapper to an already deployed contract.
func bindSystemDeployer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SystemDeployerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SystemDeployer *SystemDeployerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SystemDeployer.Contract.SystemDeployerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SystemDeployer *SystemDeployerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SystemDeployer.Contract.SystemDeployerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SystemDeployer *SystemDeployerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SystemDeployer.Contract.SystemDeployerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SystemDeployer *SystemDeployerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SystemDeployer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SystemDeployer *SystemDeployerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SystemDeployer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SystemDeployer *SystemDeployerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SystemDeployer.Contract.contract.Transact(opts, method, params...)
}

// SystemDeployerSystemContractDeployedIterator is returned from FilterSystemContractDeployed and is used to iterate over the raw logs and unpacked data for SystemContractDeployed events raised by the SystemDeployer contract.
type SystemDeployerSystemContractDeployedIterator struct {
	Event *SystemDeployerSystemContractDeployed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SystemDeployerSystemContractDeployedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SystemDeployerSystemContractDeployed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SystemDeployerSystemContractDeployed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SystemDeployerSystemContractDeployedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SystemDeployerSystemContractDeployedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SystemDeployerSystemContractDeployed represents a SystemContractDeployed event raised by the SystemDeployer contract.
type SystemDeployerSystemContractDeployed struct {
	Name            string
	ContractAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSystemContractDeployed is a free log retrieval operation binding the contract event 0xbd64e14789a915ea657e42f2dbf0b973227708fa64b58766287637985d1ade69.
//
// Solidity: event SystemContractDeployed(string name, address contractAddress)
func (_SystemDeployer *SystemDeployerFilterer) FilterSystemContractDeployed(opts *bind.FilterOpts) (*SystemDeployerSystemContractDeployedIterator, error) {

	logs, sub, err := _SystemDeployer.contract.FilterLogs(opts, "SystemContractDeployed")
	if err != nil {
		return nil, err
	}
	return &SystemDeployerSystemContractDeployedIterator{contract: _SystemDeployer.contract, event: "SystemContractDeployed", logs: logs, sub: sub}, nil
}

// WatchSystemContractDeployed is a free log subscription operation binding the contract event 0xbd64e14789a915ea657e42f2dbf0b973227708fa64b58766287637985d1ade69.
//
// Solidity: event SystemContractDeployed(string name, address contractAddress)
func (_SystemDeployer *SystemDeployerFilterer) WatchSystemContractDeployed(opts *bind.WatchOpts, sink chan<- *SystemDeployerSystemContractDeployed) (event.Subscription, error) {

	logs, sub, err := _SystemDeployer.contract.WatchLogs(opts, "SystemContractDeployed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SystemDeployerSystemContractDeployed)
				if err := _SystemDeployer.contract.UnpackLog(event, "SystemContractDeployed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSystemContractDeployed is a log parse operation binding the contract event 0xbd64e14789a915ea657e42f2dbf0b973227708fa64b58766287637985d1ade69.
//
// Solidity: event SystemContractDeployed(string name, address contractAddress)
func (_SystemDeployer *SystemDeployerFilterer) ParseSystemContractDeployed(log types.Log) (*SystemDeployerSystemContractDeployed, error) {
	event := new(SystemDeployerSystemContractDeployed)
	if err := _SystemDeployer.contract.UnpackLog(event, "SystemContractDeployed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
