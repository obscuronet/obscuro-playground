// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: enclave.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestProtoClient is the client API for TestProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestProtoClient interface {
	ReplyWithStatusError(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	ReplyWithErrorPayload(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponseWithError, error)
}

type testProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewTestProtoClient(cc grpc.ClientConnInterface) TestProtoClient {
	return &testProtoClient{cc}
}

func (c *testProtoClient) ReplyWithStatusError(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/generated.TestProto/ReplyWithStatusError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testProtoClient) ReplyWithErrorPayload(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponseWithError, error) {
	out := new(StatusResponseWithError)
	err := c.cc.Invoke(ctx, "/generated.TestProto/ReplyWithErrorPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestProtoServer is the server API for TestProto service.
// All implementations must embed UnimplementedTestProtoServer
// for forward compatibility
type TestProtoServer interface {
	ReplyWithStatusError(context.Context, *StatusRequest) (*StatusResponse, error)
	ReplyWithErrorPayload(context.Context, *StatusRequest) (*StatusResponseWithError, error)
	mustEmbedUnimplementedTestProtoServer()
}

// UnimplementedTestProtoServer must be embedded to have forward compatible implementations.
type UnimplementedTestProtoServer struct {
}

func (UnimplementedTestProtoServer) ReplyWithStatusError(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyWithStatusError not implemented")
}
func (UnimplementedTestProtoServer) ReplyWithErrorPayload(context.Context, *StatusRequest) (*StatusResponseWithError, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyWithErrorPayload not implemented")
}
func (UnimplementedTestProtoServer) mustEmbedUnimplementedTestProtoServer() {}

// UnsafeTestProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestProtoServer will
// result in compilation errors.
type UnsafeTestProtoServer interface {
	mustEmbedUnimplementedTestProtoServer()
}

func RegisterTestProtoServer(s grpc.ServiceRegistrar, srv TestProtoServer) {
	s.RegisterService(&TestProto_ServiceDesc, srv)
}

func _TestProto_ReplyWithStatusError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestProtoServer).ReplyWithStatusError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.TestProto/ReplyWithStatusError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestProtoServer).ReplyWithStatusError(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestProto_ReplyWithErrorPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestProtoServer).ReplyWithErrorPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.TestProto/ReplyWithErrorPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestProtoServer).ReplyWithErrorPayload(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestProto_ServiceDesc is the grpc.ServiceDesc for TestProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generated.TestProto",
	HandlerType: (*TestProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReplyWithStatusError",
			Handler:    _TestProto_ReplyWithStatusError_Handler,
		},
		{
			MethodName: "ReplyWithErrorPayload",
			Handler:    _TestProto_ReplyWithErrorPayload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enclave.proto",
}
