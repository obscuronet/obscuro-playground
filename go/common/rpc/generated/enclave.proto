syntax = "proto3";

option go_package = "enclave/rpc/generated";

package generated;

// todo (low priority) - remove these comments which duplicate those in common/enclave.go.
service EnclaveProto {
  // Status is used to check whether the server is ready for requests.
  rpc Status(StatusRequest) returns (StatusResponse) {}

  // Attestation - Produces an attestation report which will be used to request the shared secret from another enclave.
  rpc Attestation(AttestationRequest) returns (AttestationResponse) {}

  // GenerateSecret - the genesis enclave is responsible with generating the secret entropy
  rpc GenerateSecret(GenerateSecretRequest) returns (GenerateSecretResponse) {}

  // Init - initialise an enclave with a seed received by another enclave
  rpc InitEnclave(InitEnclaveRequest) returns (InitEnclaveResponse) {}

  // SubmitL1Block - Used for the host to submit blocks to the enclave, these may be:
  //  a. historic block - if the enclave is behind and in the process of catching up with the L1 state
  //  b. the latest block published by the L1, to which the enclave should respond with a rollup
  // It is the responsibility of the host to gossip the returned rollup
  // For good functioning the caller should always submit blocks ordered by height
  // submitting a block before receiving ancestors of it, will result in it being ignored
  rpc SubmitL1Block(SubmitBlockRequest) returns (SubmitBlockResponse) {}

  // SubmitTx - user transactions
  rpc SubmitTx(SubmitTxRequest) returns (SubmitTxResponse) {}

  // SubmitBatch submits a batch received from the sequencer for processing.
  rpc SubmitBatch(SubmitBatchRequest) returns (SubmitBatchResponse) {}

  // ObsCall - returns the result of executing the smart contract as a user, encrypted with the
  // viewing key corresponding to the `from` field
  rpc ObsCall(ObsCallRequest) returns (ObsCallResponse) {}

  // GetTransactionCount - returns the nonce of the wallet with the given address.
  rpc GetTransactionCount(GetTransactionCountRequest) returns (GetTransactionCountResponse) {}

  // Stop gracefully stops the enclave
  rpc Stop(StopRequest) returns (StopResponse) {}

  // GetTransaction returns a transaction given its Signed Hash, returns nil, false when Transaction is unknown
  rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse) {}

  // GetTransaction returns a transaction receipt given the transaction's signed hash, encrypted with the viewing key
  // corresponding to the original transaction submitter
  rpc GetTransactionReceipt(GetTransactionReceiptRequest) returns (GetTransactionReceiptResponse) {}

  // GetBalance returns the address's balance on the Obscuro network, encrypted with the viewing key corresponding to
  // the address
  rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse) {}

  // GetCode returns the code stored at the given address in the state for the given rollup height or rollup hash
  rpc GetCode(GetCodeRequest) returns (GetCodeResponse) {}

  rpc Subscribe(SubscribeRequest) returns (SubscribeResponse) {}

  rpc Unsubscribe(UnsubscribeRequest) returns (UnsubscribeResponse) {}

  // EstimateGas returns the estimation of gas used for the given transactions
  rpc EstimateGas(EstimateGasRequest) returns (EstimateGasResponse) {}

  rpc GetLogs(GetLogsRequest) returns (GetLogsResponse) {}

  // HealthCheck returns the health status of enclave + db
  rpc HealthCheck(EmptyArgs) returns (HealthCheckResponse) {}

  // GetBatch returns the encrypted batch based on a hash
  rpc GetBatch(GetBatchRequest) returns (GetBatchResponse) {}

  rpc CreateBatch(CreateBatchRequest) returns (CreateBatchResponse) {}

  rpc CreateRollup(CreateRollupRequest) returns (CreateRollupResponse) {}


  rpc DebugTraceTransaction(DebugTraceTransactionRequest) returns (DebugTraceTransactionResponse) {}

  rpc StreamL2Updates(StreamL2UpdatesRequest) returns (stream EncodedUpdateResponse) {}

  rpc DebugEventLogRelevancy(DebugEventLogRelevancyRequest) returns (DebugEventLogRelevancyResponse) {}
}

message GetBatchRequest {
  bytes knownHead = 1;
}

message GetBatchResponse {
  bytes batch = 1;
  SystemError systemError = 2;
}

message StreamL2UpdatesRequest {
  optional bytes knownHead = 1;
}

message EncodedUpdateResponse {
  bytes batch = 1;
}

message SystemError{
  int32 errorCode = 1;
  string errorString = 2;
}

message DebugEventLogRelevancyRequest{
  bytes txHash = 1;
}
message DebugEventLogRelevancyResponse{
  string msg = 1;
  SystemError systemError = 2;
}

message DebugTraceTransactionRequest{
  bytes txHash = 1;
  bytes config = 2;
}
message DebugTraceTransactionResponse{
  string msg = 1;
  SystemError systemError = 2;
}

message CreateBatchRequest{}
message CreateBatchResponse{
  string error = 2;
}


message CreateRollupRequest{}
message CreateRollupResponse{
  ExtRollupMsg msg = 1;
  SystemError systemError = 2;
}

message StatusRequest {}
message StatusResponse {
  int32 statusCode = 1;
  bytes l1Head = 2; // hash for the L1 head block in enclave's view of the canonical chain
  bytes l2Head = 3; // hash for the L2 head batch in enclave's view of the canonical chain
  SystemError systemError = 4;
}

message AttestationRequest {}
message AttestationResponse {
  AttestationReportMsg attestationReportMsg = 1;
  SystemError systemError = 2;
}

message GenerateSecretRequest {}
message GenerateSecretResponse {
  bytes encryptedSharedEnclaveSecret = 1;
  SystemError systemError = 2;
}

message InitEnclaveRequest {
  bytes encryptedSharedEnclaveSecret = 1;
}
message InitEnclaveResponse {
  SystemError systemError = 1;
}

message StartRequest {
  bytes encodedBlock = 1;
}
message StartResponse {
  SystemError systemError = 1;
}

message SubmitBlockRequest {
  bytes encodedBlock = 1;
  bytes encodedReceipts = 2;
  bool isLatest = 3;

}
message SubmitBlockResponse {
  BlockSubmissionResponseMsg blockSubmissionResponse = 1;
  SystemError systemError = 2;
}

message SubmitTxRequest {
  bytes encryptedTx = 1;
}
message SubmitTxResponse {
  bytes encodedEnclaveResponse = 1;
  SystemError systemError = 2;
}

message SubmitBatchRequest {
  ExtBatchMsg batch = 1;
}
message SubmitBatchResponse {
  SystemError systemError = 1;
}

message ObsCallRequest {
  bytes encryptedParams = 1;
}
message ObsCallResponse {
  bytes encodedEnclaveResponse = 1;
  SystemError systemError = 2;
}

message GetTransactionCountRequest {
  bytes encryptedParams = 1;
}
message GetTransactionCountResponse {
  bytes encodedEnclaveResponse = 1;
  SystemError systemError = 2;
}

message StopRequest {}
message StopResponse {
  SystemError systemError = 1;
}

message GetTransactionRequest {
  bytes encryptedParams = 1;
}
message GetTransactionResponse {
  bytes encodedEnclaveResponse = 1;
  SystemError systemError = 2;
}

message GetTransactionReceiptRequest {
  bytes encryptedParams = 1;
}
message GetTransactionReceiptResponse {
  bytes encodedEnclaveResponse = 1;
  SystemError systemError = 2;
}

message GetBalanceRequest {
  bytes encryptedParams = 1;
}
message GetBalanceResponse {
  bytes encodedEnclaveResponse = 1;
  SystemError systemError = 2;
}

message GetCodeRequest {
  bytes address = 1;
  bytes rollupHash = 2;
}
message GetCodeResponse {
  bytes code = 1;
  SystemError systemError = 2;
}

message SubscribeRequest {
  bytes id = 1;
  bytes encryptedSubscription = 2;
}
message SubscribeResponse {
  SystemError systemError = 2;
}

message UnsubscribeRequest {
  bytes id = 1;
}
message UnsubscribeResponse {
  SystemError systemError = 2;
}

message EstimateGasRequest {
  bytes encryptedParams = 1;
}

message EstimateGasResponse {
  bytes encodedEnclaveResponse = 1;
  SystemError systemError = 2;
}

message GetLogsRequest {
  bytes encryptedParams = 1;
}

message GetLogsResponse {
  bytes encodedEnclaveResponse = 1;
  SystemError systemError = 2;
}

message HealthCheckResponse {
  bool status = 1;
  SystemError systemError = 2;
}

message EmptyArgs {}

// Nested message types.

message AttestationReportMsg {
  bytes Report = 1; // The actual report bytes so it can be shared and verified by other nodes
  bytes PubKey = 2; // Public key to encrypt traffic back to this enclave
  bytes Owner = 3;
  string HostAddress = 4; // The IP address on which the host can be contacted by other Obscuro hosts for peer-to-peer communication
  SystemError systemError = 5;
}

message BlockSubmissionResponseMsg {
  ExtBatchMsg producedBatch = 1;
  ExtRollupMsg producedRollup = 2;
  repeated SecretResponseMsg producedSecretResponses = 3;
  bytes subscribedLogs = 4;
  BlockSubmissionErrorMsg error = 5; // todo (@matt) - remove this BlockSubmissionError field once we are using the Status() to update host view of enclave state
}

message BlockSubmissionErrorMsg {
  string cause = 1; // error cause description
  bytes l1Head = 2; // hash for the L1 head block in enclave's view of the canonical chain
}

message CrossChainMsg {
  bytes Sender = 1;
  uint64 Sequence = 2;
  uint32 Nonce = 3;
  uint32 Topic = 4;
  bytes Payload = 5;
}

message ExtBatchMsg {
  BatchHeaderMsg header = 1;
  repeated bytes txHashes = 2;
  bytes txs = 3;
}

message BatchHeaderMsg {
  bytes ParentHash = 1;
  bytes Proof = 4;
  bytes Root = 5;
  bytes TxHash = 6;
  uint64 Number = 7;
  bytes ReceiptHash = 9;
  bytes Extra = 10;
  bytes R = 11;
  bytes S = 12;
  uint64 GasLimit = 16;
  uint64 GasUsed = 17;
  uint64 Time = 18;
  bytes MixDigest = 19;
  uint64 BaseFee = 20;
  bytes LatestInboundCrossChainHeight = 22;
  bytes LatestInboundCrossChainHash = 23;
  repeated CrossChainMsg CrossChainMessages = 24;
}

message ExtRollupMsg {
  RollupHeaderMsg header = 1;
  bytes batchPayloads = 2;
  bytes batchHeaders = 3;
}

message RollupHeaderMsg {
  bytes ParentHash = 1;
  bytes Proof = 4;
  bytes Root = 5;
  bytes HeadBatchHash = 6;
  uint64 Number = 7;
  bytes ReceiptHash = 9;
  bytes Extra = 10;
  bytes R = 11;
  bytes S = 12;
  uint64 GasLimit = 16;
  uint64 GasUsed = 17;
  uint64 Time = 18;
  bytes MixDigest = 19;
  uint64 BaseFee = 20;
  bytes Coinbase = 21;
  bytes LatestInboundCrossChainHeight = 22;
  bytes LatestInboundCrossChainHash = 23;
  repeated CrossChainMsg CrossChainMessages = 24;
}

message SecretResponseMsg {
  bytes Secret = 1;
  bytes RequesterID = 2;
  string HostAddress = 3;
  SystemError systemError = 4;
}

message WithdrawalMsg {
  bytes amount = 1;
  bytes recipient = 2;
  bytes contract = 3;
}
